local GuiService = game:GetService("GuiService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local TextService = game:GetService("TextService")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local function table_clone(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == "table" then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[table_clone(orig_key)] = table_clone(orig_value)
        end
        setmetatable(copy, table_clone(getmetatable(orig)))
    else
        copy = orig
    end
    return copy
end

local Library = {
    Flags = {},
    Options = {},
    Themes = {},
    Windows = {},
    Connections = {},
    ToggleKey = Enum.KeyCode.RightShift,
    Watermark = nil,
    KeyListFrame = nil,
    KeyList = nil,
    KeyListItemsContainer = nil,
    DragOffset = nil,
    ZIndex = 1000,
    Opening = false,
    ActiveColorPicker = nil,
    ActiveColorPickerCpElement = nil,
    ActiveColorPickerModalOverlay = nil,
    ActiveTooltipConnection = nil,
    TooltipFrame = nil,
    TooltipTextLabel = nil,
    CurrentScript = script,
    AllDropdowns = {},
    KeybindListItems = {},
    FileSystem = {
        Enabled = false,
        MakeFolder = nil,
        WriteFile = nil,
        ReadFile = nil,
        ListFiles = nil,
        DeleteFile = nil,
        IsFile = nil,
        IsFolder = nil,
        DefaultConfigPath = "ohbeecity/"
    },
    ActiveEffectElements = {},
    GlobalEffectConnection = nil,
    ColorClipboard = nil,
    ActiveKeybindMenu = nil
}

local LibTweenService, LibUserInputService, LibRunService, LibHttpService, LibTextService =
    TweenService,
    UserInputService,
    RunService,
    HttpService,
    TextService

local CoreGui, Stats = game:GetService("CoreGui"), game:GetService("Stats")

pcall(
    function()
        local fs = Library.FileSystem
        fs.MakeFolder = makefolder
        fs.WriteFile = writefile
        fs.ReadFile = readfile
        fs.ListFiles = listfiles
        fs.IsFile = isfile
        fs.IsFolder = isfolder
        fs.DeleteFile = delfile or deletefile
        fs.Enabled = true
        print("ohbeecity: File system functions loaded.")
    end
)

local ConfigurableSettings = {
    WindowSize = UDim2.new(0, 650, 0, 550),
    ElementHeight = 20,
    ButtonHeight = 25,
    SliderHolderHeight = 35,
    DropdownHolderHeight = 30,
    TextboxHolderHeight = 45,
    ColorPickerElementHeight = 22,
    SeparatorHeight = 10,
    LabelHeight = 20,
    NewColorPickerSize = UDim2.new(0, 250, 0, 450),
    CornerRadius = UDim.new(0, 4),
    SmallCornerRadius = UDim.new(0, 3),
    SectionPadding = UDim.new(0, 8),
    ElementPadding = UDim.new(0, 8),
    DefaultFontSize = 13,
    SmallFontSize = 12,
    TitleFontSize = 14,
    WatermarkFontSize = 12,
    KeybindListFontSize = 12,
    KeybindListItemHeight = 20,
    KeybindListTitleHeight = 25,
    KeybindListWidth = 180,
    KeybindPadding = 10,
    RiskyColor = Color3.fromRGB(255, 80, 80),
    KeybindModeMenuWidth = 80,
    KeybindModeMenuHeight = 65
}

Library.Themes = {
    ["Dark"] = {
        Accent = Color3.fromRGB(145, 70, 255),
        Background = Color3.fromRGB(12, 12, 15),
        BackgroundAlt = Color3.fromRGB(20, 20, 24),
        Element = Color3.fromRGB(24, 24, 28),
        ElementAlt = Color3.fromRGB(28, 28, 32),
        Text = Color3.fromRGB(235, 235, 235),
        TextDark = Color3.fromRGB(150, 150, 150),
        Border = Color3.fromRGB(35, 35, 40),
        BorderAlt = Color3.fromRGB(45, 45, 50),
        TextOnAccent = Color3.fromRGB(255, 255, 255),
        TextRisky = ConfigurableSettings.RiskyColor
    },
    ["Midnight"] = {
        Accent = Color3.fromRGB(100, 190, 255),
        Background = Color3.fromRGB(15, 15, 20),
        BackgroundAlt = Color3.fromRGB(20, 20, 30),
        Element = Color3.fromRGB(25, 25, 35),
        ElementAlt = Color3.fromRGB(30, 30, 40),
        Text = Color3.fromRGB(240, 240, 240),
        TextDark = Color3.fromRGB(160, 160, 160),
        Border = Color3.fromRGB(30, 30, 45),
        BorderAlt = Color3.fromRGB(40, 40, 55),
        TextOnAccent = Color3.fromRGB(10, 10, 10),
        TextRisky = ConfigurableSettings.RiskyColor
    },
    ["Blood"] = {
        Accent = Color3.fromRGB(255, 50, 50),
        Background = Color3.fromRGB(20, 10, 10),
        BackgroundAlt = Color3.fromRGB(30, 15, 15),
        Element = Color3.fromRGB(35, 20, 20),
        ElementAlt = Color3.fromRGB(40, 25, 25),
        Text = Color3.fromRGB(255, 240, 240),
        TextDark = Color3.fromRGB(200, 150, 150),
        Border = Color3.fromRGB(50, 25, 25),
        BorderAlt = Color3.fromRGB(70, 35, 35),
        TextOnAccent = Color3.fromRGB(255, 255, 255),
        TextRisky = ConfigurableSettings.RiskyColor
    },
    ["AstralPink"] = {
        Accent = Color3.fromRGB(233, 30, 99),
        Background = Color3.fromRGB(40, 35, 50),
        BackgroundAlt = Color3.fromRGB(45, 40, 55),
        Element = Color3.fromRGB(50, 45, 60),
        ElementAlt = Color3.fromRGB(55, 50, 65),
        Text = Color3.fromRGB(220, 220, 230),
        TextDark = Color3.fromRGB(140, 135, 150),
        Border = Color3.fromRGB(55, 50, 65),
        BorderAlt = Color3.fromRGB(65, 60, 75),
        TextOnAccent = Color3.fromRGB(255, 255, 255),
        TextRisky = ConfigurableSettings.RiskyColor
    },
    ["PastelDream"] = {
        Accent = Color3.fromRGB(177, 156, 217),
        Background = Color3.fromRGB(240, 240, 250),
        BackgroundAlt = Color3.fromRGB(230, 230, 245),
        Element = Color3.fromRGB(220, 220, 240),
        ElementAlt = Color3.fromRGB(210, 210, 235),
        Text = Color3.fromRGB(80, 80, 100),
        TextDark = Color3.fromRGB(120, 120, 140),
        Border = Color3.fromRGB(195, 195, 215),
        BorderAlt = Color3.fromRGB(185, 185, 205),
        TextOnAccent = Color3.fromRGB(255, 255, 255),
        TextRisky = ConfigurableSettings.RiskyColor
    },
    ["Oceanic"] = {
        Accent = Color3.fromRGB(0, 150, 199),
        Background = Color3.fromRGB(10, 25, 47),
        BackgroundAlt = Color3.fromRGB(15, 35, 57),
        Element = Color3.fromRGB(20, 45, 67),
        ElementAlt = Color3.fromRGB(25, 55, 77),
        Text = Color3.fromRGB(202, 240, 248),
        TextDark = Color3.fromRGB(140, 180, 198),
        Border = Color3.fromRGB(25, 60, 82),
        BorderAlt = Color3.fromRGB(35, 70, 92),
        TextOnAccent = Color3.fromRGB(255, 255, 255),
        TextRisky = ConfigurableSettings.RiskyColor
    }
}
Library.Theme = Library.Themes["Dark"]
Library.CurrentThemeName = "Dark"

local function AddConnection(c)
    table.insert(Library.Connections, c)
end
local UIScreenGui = Instance.new("ScreenGui")
UIScreenGui.Name = "UILibraryScreenGui_ohbeecity"
UIScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
UIScreenGui.ResetOnSpawn = false
UIScreenGui.DisplayOrder = Library.ZIndex
UIScreenGui.Parent = CoreGui
local function Create(class, properties)
    local instance
    local s, r = pcall(Instance.new, class)
    if not s then
        warn("ohbeecity Create pcall fail: " .. tostring(class), r)
        return nil
    end
    instance = r
    if not instance then
        warn("ohbeecity Create new fail: " .. tostring(class))
        return nil
    end
    for p, v in pairs(properties) do
        if p == "ZIndex" and instance:IsA("GuiObject") then
            instance.ZIndex =
                v +
                ((properties.Parent and properties.Parent:IsA("GuiObject") and properties.Parent.ZIndex) or
                    Library.ZIndex)
        else
            instance[p] = v
        end
    end
    return instance
end

Library.TooltipFrame =
    Create(
    "Frame",
    {
        Name = "TooltipFrame",
        Size = UDim2.new(0, 150, 0, 30),
        Position = UDim2.new(0, -9999, 0, -9999),
        BackgroundColor3 = Library.Theme.BackgroundAlt,
        BorderSizePixel = 0,
        Visible = false,
        ZIndex = Library.ZIndex + 5000,
        Parent = UIScreenGui,
        ClipsDescendants = false
    }
)
Create("UICorner", {Parent = Library.TooltipFrame, CornerRadius = ConfigurableSettings.SmallCornerRadius})
Create("UIStroke", {Name = "TooltipStroke", Parent = Library.TooltipFrame, Color = Library.Theme.Border, Thickness = 1})
Library.TooltipTextLabel =
    Create(
    "TextLabel",
    {
        Name = "TooltipTextLabel",
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0, 5, 0, 5),
        BackgroundTransparency = 1,
        TextColor3 = Library.Theme.Text,
        TextSize = ConfigurableSettings.SmallFontSize,
        Font = Enum.Font.Gotham,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        AutomaticSize = Enum.AutomaticSize.XY,
        Parent = Library.TooltipFrame
    }
)
AddConnection(
    Library.TooltipTextLabel:GetPropertyChangedSignal("AbsoluteSize"):Connect(
        function()
            if Library.TooltipFrame and Library.TooltipFrame.Visible then
                local ts = Library.TooltipTextLabel.AbsoluteSize
                local p = Vector2.new(10, 10)
                Library.TooltipFrame.Size = UDim2.new(0, ts.X + p.X, 0, ts.Y + p.Y)
            end
        end
    )
)
function Library:ShowTooltip(text, elementHovered)
    if not self.TooltipFrame or not self.TooltipTextLabel then
        return
    end
    self.TooltipTextLabel.Text = text
    self.TooltipFrame.Visible = true
    task.wait()
    local function updateTooltipPosition()
        if not self.TooltipFrame.Visible then
            if self.ActiveTooltipConnection then
                self.ActiveTooltipConnection:Disconnect()
                self.ActiveTooltipConnection = nil
            end
            return
        end
        local m = LibUserInputService:GetMouseLocation()
        local vS = workspace.CurrentCamera.ViewportSize
        local tS = self.TooltipFrame.AbsoluteSize
        local oX, oY = 15, -tS.Y - 10
        local tX, tY = m.X + oX, m.Y + oY
        if tX + tS.X > vS.X - 10 then
            tX = m.X - tS.X - 10
        end
        if tX < 10 then
            tX = 10
        end
        if tY + tS.Y > vS.Y - 10 then
            tY = m.Y + 15
        end
        if tY < 10 then
            tY = 10
        end
        self.TooltipFrame.Position = UDim2.new(0, tX, 0, tY)
    end
    updateTooltipPosition()
    if self.ActiveTooltipConnection then
        self.ActiveTooltipConnection:Disconnect()
        self.ActiveTooltipConnection = nil
    end
    self.ActiveTooltipConnection = LibRunService.RenderStepped:Connect(updateTooltipPosition)
end
function Library:HideTooltip()
    if not self.TooltipFrame then
        return
    end
    self.TooltipFrame.Visible = false
    if self.ActiveTooltipConnection then
        self.ActiveTooltipConnection:Disconnect()
        self.ActiveTooltipConnection = nil
    end
end
local function MakeDraggable(frm, hndl)
    local d, dS, sP
    AddConnection(
        hndl.InputBegan:Connect(
            function(i)
                if i.UserInputType == Enum.UserInputType.MouseButton1 then
                    d, dS, sP = true, i.Position, frm.Position
                    frm.ZIndex = (frm.ZIndex or Library.ZIndex) + 1000
                end
            end
        )
    )
    AddConnection(
        LibUserInputService.InputEnded:Connect(
            function(i)
                if i.UserInputType == Enum.UserInputType.MouseButton1 then
                    d = false
                end
            end
        )
    )
    AddConnection(
        LibUserInputService.InputChanged:Connect(
            function(i)
                if d and i.UserInputType == Enum.UserInputType.MouseMovement then
                    local dl = i.Position - dS
                    frm.Position = UDim2.new(sP.X.Scale, sP.X.Offset + dl.X, sP.Y.Scale, sP.Y.Offset + dl.Y)
                end
            end
        )
    )
end
function Library:CreateWatermark()
    self.Watermark =
        Create(
        "Frame",
        {
            Name = "Watermark",
            Size = UDim2.new(0, 200, 0, 25),
            Position = UDim2.new(0, 10, 0, 10),
            BackgroundColor3 = self.Theme.BackgroundAlt,
            BorderSizePixel = 0,
            Parent = UIScreenGui,
            ZIndex = Library.ZIndex + 100
        }
    )
    Create("UICorner", {Parent = self.Watermark, CornerRadius = ConfigurableSettings.CornerRadius})
    Create("UIStroke", {Parent = self.Watermark, Color = self.Theme.Border, Thickness = 1, Transparency = 0.5})
    local txt =
        Create(
        "TextLabel",
        {
            Name = "WatermarkText",
            Size = UDim2.new(1, -10, 1, 0),
            Position = UDim2.new(0, 5, 0, 0),
            BackgroundTransparency = 1,
            Text = "ohbeecity | FPS: 0 | MS: 0",
            TextColor3 = self.Theme.Text,
            TextSize = ConfigurableSettings.WatermarkFontSize,
            Font = Enum.Font.Gotham,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = self.Watermark
        }
    )
    spawn(
        function()
            while self.Watermark and self.Watermark.Parent do
                local fps = LibRunService:IsStudio() and 60 or math.floor(1 / LibRunService.Heartbeat:Wait())
                local ping =
                    (Stats and Stats.Network.ServerStatsItem["Data Ping"]) and
                    math.floor(Stats.Network.ServerStatsItem["Data Ping"]:GetValue()) or
                    0
                txt.Text = string.format("ohbeecity | FPS: %d | MS: %d", fps, ping)
                task.wait(0.5)
            end
        end
    )
end

function Library:_CreateModalOverlay(parentZIndex)
    -- Remove modal overlay entirely to fix interaction issues
    if self.ActiveColorPickerModalOverlay and self.ActiveColorPickerModalOverlay.Parent then
        self.ActiveColorPickerModalOverlay:Destroy()
        self.ActiveColorPickerModalOverlay = nil
    end
    -- Don't create a new overlay - this was causing the interaction blocking
end

function Library:_DestroyModalOverlay()
    if self.ActiveColorPickerModalOverlay and self.ActiveColorPickerModalOverlay.Parent then
        self.ActiveColorPickerModalOverlay:Destroy()
        self.ActiveColorPickerModalOverlay = nil
    end
end

function Library:UpdateGlobalEffects()
    if #self.ActiveEffectElements == 0 then
        if self.GlobalEffectConnection then
            self.GlobalEffectConnection:Disconnect()
            self.GlobalEffectConnection = nil
        end
        return
    end
    local i = #self.ActiveEffectElements
    while i >= 1 do
        local effectInfo = self.ActiveEffectElements[i]
        if not effectInfo or not effectInfo.element then -- Added check for effectInfo.element
            table.remove(self.ActiveEffectElements, i)
            i = i - 1
        else
            local element = effectInfo.element
            local effectData = effectInfo.effectData
            local displayButton = element.DisplayButton or (element.EnableColorPicker and element.ColorDisplayButton)

            if not (element and displayButton and displayButton.Parent and displayButton:IsA("GuiObject")) then -- Added IsA("GuiObject") check
                table.remove(self.ActiveEffectElements, i)
            else
                local baseHue = element.ManualHue or element.Hue or 0
                local baseSat = element.ManualSat or element.Sat or 0
                local baseVal = element.ManualVal or element.Val or 1
                local baseAlpha = element.ManualAlpha or element.Alpha or (element.ValueAlpha or 1)
                local newHue, newSat, newVal = baseHue, baseSat, baseVal
                local effectSpeed = (effectData.EffectSpeed or 5) * 0.5
                if effectData.IsRainbow then
                    newHue = (tick() * effectSpeed * 0.2) % 1
                end
                if effectData.IsPulsing then
                    local pulse = (math.sin(tick() * effectSpeed * math.pi) + 1) / 2
                    newVal = baseVal * (0.5 + pulse * 0.5)
                end
                local newColor = Color3.fromHSV(newHue, newSat, newVal)

                if displayButton:IsA("GuiButton") or displayButton:IsA("Frame") then -- Ensure it can have BackgroundColor3
                    displayButton.BackgroundColor3 = newColor
                end
                local alphaOverlay = displayButton:FindFirstChild("AlphaOverlay")
                if alphaOverlay then
                    alphaOverlay.BackgroundTransparency = 1 - baseAlpha
                end
                if effectData.IsRainbow then
                    element.Hue = newHue
                end
                if element.Flag then
                    local flagData
                    if element.EnableColorPicker then
                        flagData = {
                            enabled = element.Enabled,
                            color = {R = newColor.R, G = newColor.G, B = newColor.B, A = baseAlpha},
                            EffectData = table_clone(effectData)
                        }
                    else
                        flagData = {
                            R = newColor.R,
                            G = newColor.G,
                            B = newColor.B,
                            A = baseAlpha,
                            EffectData = table_clone(effectData)
                        }
                    end
                    Library.Flags[element.Flag] = flagData
                end
                if effectData.IsRainbow or effectData.IsPulsing then
                    if element.EnableColorPicker then
                        element.Callback(element.Enabled, newColor, baseAlpha, effectData)
                    else
                        element.Callback(newColor, baseAlpha, effectData)
                    end
                end
                if element.Flag == "theme_accent_color" and (effectData.IsRainbow or effectData.IsPulsing) then
                    Library.Theme.Accent = newColor
                    local L = 0.2126 * newColor.R + 0.7152 * newColor.G + 0.0722 * newColor.B
                    Library.Theme.TextOnAccent = L > 0.5 and Color3.fromRGB(0, 0, 0) or Color3.fromRGB(255, 255, 255)
                    for _, win in ipairs(Library.Windows) do
                        if win.ActiveTab and win.ActiveTab.Button then
                            win.ActiveTab.Button.BackgroundColor3 = newColor
                            win.ActiveTab.Button.TextColor3 = Library.Theme.TextOnAccent
                        end
                    end
                    if Library.KeyListFrame then
                        local tT = Library.KeyListFrame:FindFirstChild("TitleBar"):FindFirstChild("TitleText")
                        if tT then
                            tT.TextColor3 = newColor
                        end
                        if Library.KeyList then
                            for _, itemEntry in pairs(Library.KeybindListItems) do
                                if itemEntry.Frame and itemEntry.Frame:FindFirstChild("KeyLabel") then
                                    local kL = itemEntry.Frame:FindFirstChild("KeyLabel")
                                    local kbOpt = nil
                                    for f, opt in pairs(Library.Options) do
                                        if opt.ListItem == itemEntry then
                                            kbOpt = opt
                                            break
                                        end
                                    end
                                    if kbOpt and kbOpt.Active then
                                        kL.TextColor3 = newColor
                                    else
                                        kL.TextColor3 = Library.Theme.TextDark
                                    end
                                end
                            end
                        end
                    end
                    if Library.ManageConfigsSection and Library.ManageConfigsSection.ConfigListFrame then
                        Library.ManageConfigsSection.ConfigListFrame.ScrollBarImageColor3 = newColor
                    end
                end
            end
        end
        i = i - 1
    end
end

function Library:CopyColor(c, a, eD)
    self.ColorClipboard = {Color = c, Alpha = a, EffectData = table_clone(eD)}
    print("ohbeecity: Color copied.")
end
function Library:PasteColor()
    if self.ColorClipboard then
        return self.ColorClipboard.Color, self.ColorClipboard.Alpha, table_clone(self.ColorClipboard.EffectData)
    end
    return nil
end
function Library:_CreateNewColorPickerUI(cpE, winF, isTogCol)
    local oPF = self.ActiveColorPicker
    if
        self.ActiveColorPicker and self.ActiveColorPicker.Parent and self.ActiveColorPickerCpElement and
            self.ActiveColorPickerCpElement ~= cpE
     then
        local oCB = oPF:FindFirstChild("CancelBtn", true)
        if oCB and oCB:IsA("TextButton") then
            pcall(
                function()
                    oCB.MouseButton1Click:Fire()
                end
            )
        else
            if oPF.Parent then
                oPF:Destroy()
            end
        end
        self:_DestroyModalOverlay()
        self.ActiveColorPicker = nil
        self.ActiveColorPickerCpElement = nil
    end
    local pF =
        Create(
        "Frame",
        {
            Name = "ColorPickerFrame",
            Size = ConfigurableSettings.NewColorPickerSize,
            Position = UDim2.new(0.5, 0, 0.5, 0),
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundColor3 = self.Theme.BackgroundAlt,
            BorderSizePixel = 0,
            Parent = UIScreenGui,
            ZIndex = Library.ZIndex + 1000,
            ClipsDescendants = true
        }
    )
    Create("UICorner", {Parent = pF, CornerRadius = ConfigurableSettings.CornerRadius})
    Create("UIStroke", {Parent = pF, Color = self.Theme.Border, Thickness = 1, Transparency = 0.3})
    self.ActiveColorPicker = pF
    self.ActiveColorPickerCpElement = cpE
    local tB =
        Create(
        "Frame",
        {
            Name = "TitleBar",
            Size = UDim2.new(1, 0, 0, 25),
            BackgroundColor3 = self.Theme.Element,
            BorderSizePixel = 0,
            Parent = pF
        }
    )
    Create("UICorner", {Parent = tB, CornerRadius = ConfigurableSettings.CornerRadius})
    Create(
        "Frame",
        {
            Name = "TitleFix",
            Size = UDim2.new(1, 0, 0, ConfigurableSettings.CornerRadius.Offset),
            Position = UDim2.new(0, 0, 1, -ConfigurableSettings.CornerRadius.Offset),
            BackgroundColor3 = self.Theme.Element,
            BorderSizePixel = 0,
            Parent = tB
        }
    )
    Create(
        "TextLabel",
        {
            Size = UDim2.new(1, -10, 1, 0),
            Position = UDim2.new(0, 10, 0, 0),
            BackgroundTransparency = 1,
            Text = cpE.Name,
            TextColor3 = self.Theme.Text,
            TextSize = ConfigurableSettings.DefaultFontSize,
            Font = Enum.Font.GothamBold,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = tB
        }
    )
    cpE.PickerHue, cpE.PickerSat, cpE.PickerVal, cpE.PickerAlpha =
        cpE.ManualHue,
        cpE.ManualSat,
        cpE.ManualVal,
        cpE.ManualAlpha
    local effUpdConn
    local function animC(c, nP)
        if c and c.Parent then
            LibTweenService:Create(c, TweenInfo.new(0.05), {Position = nP}):Play()
        end
    end
    local cYOff = 35
    local cCont =
        Create(
        "Frame",
        {
            Size = UDim2.new(1, -20, 0, 180),
            Position = UDim2.new(0, 10, 0, cYOff),
            BackgroundTransparency = 1,
            Parent = pF
        }
    )
    cYOff = cYOff + 180 + 10
    local cSq =
        Create(
        "Frame",
        {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BorderSizePixel = 0,
            Parent = cCont,
            ZIndex = pF.ZIndex + 1
        }
    )
    Create("UICorner", {Parent = cSq, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    local hL =
        Create(
        "ImageLabel",
        {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Image = "rbxassetid://6976876787",
            ImageColor3 = Color3.fromHSV(cpE.PickerHue, 1, 1),
            Parent = cSq,
            ZIndex = cSq.ZIndex + 1
        }
    )
    Create("UICorner", {Parent = hL, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    local bO =
        Create(
        "ImageLabel",
        {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Image = "rbxassetid://6941137543",
            ImageColor3 = Color3.fromRGB(0, 0, 0),
            Parent = cSq,
            ZIndex = cSq.ZIndex + 2
        }
    )
    Create("UICorner", {Parent = bO, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    local svC =
        Create(
        "Frame",
        {
            Size = UDim2.new(0, 14, 0, 14),
            Position = UDim2.new(cpE.PickerSat, -7, 1 - cpE.PickerVal, -7),
            BorderSizePixel = 0,
            Parent = cSq,
            ZIndex = cSq.ZIndex + 3
        }
    )
    Create("UICorner", {Parent = svC, CornerRadius = UDim.new(0, 7)})
    local iC =
        Create(
        "Frame",
        {
            Size = UDim2.new(1, -4, 1, -4),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            AnchorPoint = Vector2.new(0.5, 0.5),
            BorderSizePixel = 0,
            Parent = svC
        }
    )
    Create("UICorner", {Parent = iC, CornerRadius = UDim.new(0, 5)})
    local hSli =
        Create(
        "Frame",
        {
            Size = UDim2.new(1, -20, 0, 20),
            Position = UDim2.new(0, 10, 0, cYOff),
            BackgroundColor3 = Color3.new(1, 1, 1),
            BorderSizePixel = 0,
            Parent = pF
        }
    )
    Create("UICorner", {Parent = hSli, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    Create(
        "UIGradient",
        {
            Color = ColorSequence.new {
                ColorSequenceKeypoint.new(0, Color3.fromHSV(0, 1, 1)),
                ColorSequenceKeypoint.new(0.17, Color3.fromHSV(0.17, 1, 1)),
                ColorSequenceKeypoint.new(0.33, Color3.fromHSV(0.33, 1, 1)),
                ColorSequenceKeypoint.new(0.5, Color3.fromHSV(0.5, 1, 1)),
                ColorSequenceKeypoint.new(0.67, Color3.fromHSV(0.67, 1, 1)),
                ColorSequenceKeypoint.new(0.83, Color3.fromHSV(0.83, 1, 1)),
                ColorSequenceKeypoint.new(1, Color3.fromHSV(1, 1, 1))
            },
            Parent = hSli
        }
    )
    cYOff = cYOff + 20 + 10
    local hC =
        Create(
        "Frame",
        {
            Size = UDim2.new(0, 12, 1, 6),
            Position = UDim2.new(cpE.PickerHue, -6, 0.5, 0),
            AnchorPoint = Vector2.new(0, 0.5),
            BackgroundColor3 = Color3.new(1, 1, 1),
            BorderSizePixel = 0,
            Parent = hSli
        }
    )
    Create("UICorner", {Parent = hC, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    local hCS =
        Create(
        "UIStroke",
        {Parent = hC, Color = Color3.fromHSV(cpE.PickerHue, cpE.PickerSat, cpE.PickerVal), Thickness = 2}
    )
    local aSli = Create("Frame", {
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 10, 0, cYOff),
        BackgroundColor3 = Color3.new(1, 1, 1),
        BorderSizePixel = 0,
        Parent = pF
    })
    Create("UICorner", {Parent = aSli, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    cYOff = cYOff + 20 + 15
    local chkB = Create("ImageLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        Image = "rbxassetid://16630348",
        ScaleType = Enum.ScaleType.Tile,
        TileSize = UDim2.new(0, 8, 0, 8),
        BackgroundTransparency = 1,
        ImageColor3 = Color3.fromRGB(200, 200, 200),
        Parent = aSli
    })
    Create("UICorner", {Parent = chkB, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    local aGrad = Create("Frame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = Color3.fromHSV(cpE.PickerHue, cpE.PickerSat, cpE.PickerVal),
        BorderSizePixel = 0,
        Parent = aSli,
        ZIndex = chkB.ZIndex + 1
    })
    Create("UICorner", {Parent = aGrad, CornerRadius = ConfigurableSettings.SmallCornerRadius})

    Create("UIGradient", {
        Transparency = NumberSequence.new{
            NumberSequenceKeypoint.new(0, 0),    -- Fully visible on left
            NumberSequenceKeypoint.new(1, 1)     -- Fully transparent on right
        },
        Parent = aGrad
    })

local aC = Create("Frame", {
    Size = UDim2.new(0, 12, 1, 6),
    Position = UDim2.new(cpE.PickerAlpha, -6, 0.5, 0),
    AnchorPoint = Vector2.new(0, 0.5),
    BackgroundColor3 = Color3.new(1, 1, 1),
    BorderSizePixel = 0,
    Parent = aSli,
    ZIndex = aGrad.ZIndex + 1
})
Create("UICorner", {Parent = aC, CornerRadius = ConfigurableSettings.SmallCornerRadius})
local aCS = Create("UIStroke", {
    Parent = aC, 
    Color = Color3.fromHSV(cpE.PickerHue, cpE.PickerSat, cpE.PickerVal), 
    Thickness = 2
})

    local effCont =
        Create(
        "Frame",
        {
            Size = UDim2.new(1, -20, 0, 60),
            Position = UDim2.new(0, 10, 0, cYOff),
            BackgroundTransparency = 1,
            Parent = pF
        }
    )
    Create("UIListLayout", {Parent = effCont, FillDirection = Enum.FillDirection.Vertical, Padding = UDim.new(0, 5)})
    cYOff = cYOff + 60 + 10
    local _updUICol
    local function crEffTog(n, fN, p)
        local h = Create("Frame", {Size = UDim2.new(1, 0, 0, 20), BackgroundTransparency = 1, Parent = p})
        local b =
            Create(
            "Frame",
            {
                Name = "Box",
                Size = UDim2.new(0, 16, 0, 16),
                Position = UDim2.new(0, 0, 0.5, -8),
                BackgroundColor3 = cpE.EffectData[fN] and Library.Theme.Accent or Library.Theme.ElementAlt,
                Parent = h
            }
        )
        Create("UICorner", {Parent = b, CornerRadius = ConfigurableSettings.SmallCornerRadius})
        local ch =
            Create(
            "ImageLabel",
            {
                Name = "Check",
                Size = UDim2.new(1, -4, 1, -4),
                Position = UDim2.new(0, 2, 0, 2),
                BackgroundTransparency = 1,
                Image = "rbxassetid://4555411759",
                ImageColor3 = Library.Theme.TextOnAccent,
                ImageTransparency = cpE.EffectData[fN] and 0 or 1,
                Parent = b
            }
        )
        Create(
            "TextLabel",
            {
                Size = UDim2.new(1, -25, 1, 0),
                Position = UDim2.new(0, 25, 0, 0),
                BackgroundTransparency = 1,
                Text = n,
                TextColor3 = Library.Theme.Text,
                TextSize = ConfigurableSettings.DefaultFontSize,
                Font = Enum.Font.Gotham,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = h
            }
        )
        local btn =
            Create("TextButton", {Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, Text = "", Parent = h})
        btn.MouseButton1Click:Connect(
            function()
                cpE.EffectData[fN] = not cpE.EffectData[fN]
                LibTweenService:Create(ch, TweenInfo.new(0.15), {ImageTransparency = cpE.EffectData[fN] and 0 or 1}):Play(

                )
                LibTweenService:Create(
                    b,
                    TweenInfo.new(0.15),
                    {BackgroundColor3 = cpE.EffectData[fN] and Library.Theme.Accent or Library.Theme.ElementAlt}
                ):Play()
                if cpE.EffectData.IsRainbow or cpE.EffectData.IsPulsing then
                    if not effUpdConn or not effUpdConn.Connected then
                        cpE.ManualHue, cpE.ManualSat, cpE.ManualVal = cpE.PickerHue, cpE.PickerSat, cpE.PickerVal
                        effUpdConn =
                            LibRunService.RenderStepped:Connect(
                            function()
                                _updUICol(true)
                            end
                        )
                    end
                elseif effUpdConn and effUpdConn.Connected then
                    effUpdConn:Disconnect()
                    effUpdConn = nil
                    cpE.PickerHue, cpE.PickerSat, cpE.PickerVal = cpE.ManualHue, cpE.ManualSat, cpE.ManualVal
                end
                _updUICol(cpE.EffectData.IsRainbow or cpE.EffectData.IsPulsing)
            end
        )
        return {Holder = h, Check = ch, Box = b}
    end
    crEffTog("Rainbow", "IsRainbow", effCont)
    crEffTog("Pulse", "IsPulsing", effCont)
    local spdSliH = Create("Frame", {Size = UDim2.new(1, 0, 0, 20), BackgroundTransparency = 1, Parent = effCont})
    local spdLbl =
        Create(
        "TextLabel",
        {
            Size = UDim2.new(0.35, 0, 1, 0),
            BackgroundTransparency = 1,
            Text = "Speed: " .. (cpE.EffectData.EffectSpeed or 5),
            TextColor3 = Library.Theme.Text,
            TextSize = ConfigurableSettings.SmallFontSize - 1,
            Parent = spdSliH,
            TextXAlignment = Enum.TextXAlignment.Left
        }
    )
    local spdTrk =
        Create(
        "Frame",
        {
            Size = UDim2.new(0.65, -5, 0, 6),
            Position = UDim2.new(0.35, 5, 0.5, -3),
            BackgroundColor3 = Library.Theme.ElementAlt,
            Parent = spdSliH
        }
    )
    Create("UICorner", {Parent = spdTrk, CornerRadius = UDim.new(0, 3)})
    local spdFil =
        Create(
        "Frame",
        {
            Size = UDim2.new(((cpE.EffectData.EffectSpeed or 5) - 1) / 9, 0, 1, 0),
            BackgroundColor3 = Library.Theme.Accent,
            Parent = spdTrk
        }
    )
    Create("UICorner", {Parent = spdFil, CornerRadius = UDim.new(0, 3)})
    local spdDrag = false
    local function updSpdSli(mX)
        local rX = math.clamp((mX - spdTrk.AbsolutePosition.X) / spdTrk.AbsoluteSize.X, 0, 1)
        cpE.EffectData.EffectSpeed = math.max(1, math.floor(rX * 9 + 1))
        spdFil.Size = UDim2.new((cpE.EffectData.EffectSpeed - 1) / 9, 0, 1, 0)
        spdLbl.Text = "Speed: " .. cpE.EffectData.EffectSpeed
        _updUICol(true)
    end
    spdTrk.InputBegan:Connect(
        function(inp)
            if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                spdDrag = true
                updSpdSli(inp.Position.X)
            end
        end
    )
    local spdInChConn =
        LibUserInputService.InputChanged:Connect(
        function(inp)
            if spdDrag and inp.UserInputType == Enum.UserInputType.MouseMovement then
                updSpdSli(inp.Position.X)
            end
        end
    )
    local spdInEndConn =
        LibUserInputService.InputEnded:Connect(
        function(inp)
            if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                spdDrag = false
            end
        end
    )
    local btnCont =
        Create(
        "Frame",
        {
            Size = UDim2.new(1, -20, 0, 25),
            Position = UDim2.new(0, 10, 0, cYOff),
            BackgroundTransparency = 1,
            Parent = pF
        }
    )
    local confBtn =
        Create(
        "TextButton",
        {
            Name = "Confirm",
            Size = UDim2.new(0.48, 0, 1, 0),
            BackgroundColor3 = Library.Theme.Accent,
            Text = "Confirm",
            TextColor3 = Library.Theme.TextOnAccent,
            TextSize = ConfigurableSettings.DefaultFontSize,
            Font = Enum.Font.Gotham,
            Parent = btnCont
        }
    )
    Create("UICorner", {Parent = confBtn, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    local cancBtn =
        Create(
        "TextButton",
        {
            Name = "CancelBtn",
            Size = UDim2.new(0.48, 0, 1, 0),
            Position = UDim2.new(0.52, 0, 0, 0),
            BackgroundColor3 = Library.Theme.ElementAlt,
            Text = "Cancel",
            TextColor3 = Library.Theme.Text,
            TextSize = ConfigurableSettings.DefaultFontSize,
            Font = Enum.Font.Gotham,
            Parent = btnCont
        }
    )
    Create("UICorner", {Parent = cancBtn, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    local cpPCont =
        Create(
        "Frame",
        {
            Size = UDim2.new(1, -20, 0, 25),
            Position = UDim2.new(0, 10, 0, cYOff + 30),
            BackgroundTransparency = 1,
            Parent = pF
        }
    )
    local cBtn =
        Create(
        "TextButton",
        {
            Size = UDim2.new(0.48, 0, 1, 0),
            BackgroundColor3 = Library.Theme.Element,
            Text = "Copy",
            TextColor3 = Library.Theme.Text,
            TextSize = ConfigurableSettings.DefaultFontSize,
            Font = Enum.Font.Gotham,
            Parent = cpPCont
        }
    )
    Create("UICorner", {Parent = cBtn, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    local pBtn =
        Create(
        "TextButton",
        {
            Size = UDim2.new(0.48, 0, 1, 0),
            Position = UDim2.new(0.52, 0, 0, 0),
            BackgroundColor3 = Library.Theme.Element,
            Text = "Paste",
            TextColor3 = Library.Theme.Text,
            TextSize = ConfigurableSettings.DefaultFontSize,
            Font = Enum.Font.Gotham,
            Parent = cpPCont
        }
    )
    Create("UICorner", {Parent = pBtn, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    cBtn.MouseEnter:Connect(
        function()
            LibTweenService:Create(cBtn, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.ElementAlt}):Play()
        end
    )
    cBtn.MouseLeave:Connect(
        function()
            LibTweenService:Create(cBtn, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.Element}):Play()
        end
    )
    pBtn.MouseEnter:Connect(
        function()
            if Library.ColorClipboard then
                LibTweenService:Create(pBtn, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.ElementAlt}):Play()
            end
        end
    )
    pBtn.MouseLeave:Connect(
        function()
            LibTweenService:Create(pBtn, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.Element}):Play()
        end
    )
    cBtn.MouseButton1Click:Connect(
        function()
            local curCol = Color3.fromHSV(cpE.PickerHue, cpE.PickerSat, cpE.PickerVal)
            Library:CopyColor(curCol, cpE.PickerAlpha, cpE.EffectData)
            cBtn.Text = "Copied!"
            task.wait(0.5)
            cBtn.Text = "Copy"
        end
    )
    pBtn.MouseButton1Click:Connect(
        function()
            local pCol, pA, pED = Library:PasteColor()
            if pCol then
                local h, s, v = pCol:ToHSV()
                cpE.PickerHue, cpE.PickerSat, cpE.PickerVal = h, s, v
                cpE.PickerAlpha = pA
                cpE.ManualHue, cpE.ManualSat, cpE.ManualVal, cpE.ManualAlpha = h, s, v, pA
                cpE.EffectData = table_clone(pED)
                _updUICol(cpE.EffectData.IsRainbow or cpE.EffectData.IsPulsing)
                for _, ch in ipairs(effCont:GetChildren()) do
                    if ch:IsA("Frame") and ch:FindFirstChild("Box") then
                        local chI = ch.Box:FindFirstChild("Check")
                        local lbl = ch:FindFirstChildOfClass("TextLabel")
                        if lbl and chI then
                            if lbl.Text == "Rainbow" then
                                chI.ImageTransparency = cpE.EffectData.IsRainbow and 0 or 1
                                ch.Box.BackgroundColor3 =
                                    cpE.EffectData.IsRainbow and Library.Theme.Accent or Library.Theme.ElementAlt
                            elseif lbl.Text == "Pulse" then
                                chI.ImageTransparency = cpE.EffectData.IsPulsing and 0 or 1
                                ch.Box.BackgroundColor3 =
                                    cpE.EffectData.IsPulsing and Library.Theme.Accent or Library.Theme.ElementAlt
                            end
                        end
                    end
                end
                spdFil.Size = UDim2.new(((cpE.EffectData.EffectSpeed or 5) - 1) / 9, 0, 1, 0)
                spdLbl.Text = "Speed: " .. (cpE.EffectData.EffectSpeed or 5)
                pBtn.Text = "Pasted!"
                task.wait(0.5)
                pBtn.Text = "Paste"
            else
                pBtn.Text = "No Color"
                task.wait(0.5)
                pBtn.Text = "Paste"
            end
        end
    )



    
    if not Library.ColorClipboard then
        pBtn.TextColor3 = Library.Theme.TextDark
    end
    _updUICol = function(isEffPrevAct)
        local tH, tS, tV, tA
        if isEffPrevAct then
            tH, tS, tV, tA = cpE.ManualHue, cpE.ManualSat, cpE.ManualVal, cpE.PickerAlpha
            local effSpd = (cpE.EffectData.EffectSpeed or 5) * 0.5
            if cpE.EffectData.IsRainbow then
                tH = (tick() * effSpd * 0.2) % 1
            end
            if cpE.EffectData.IsPulsing then
                tV = cpE.ManualVal * (0.5 + ((math.sin(tick() * effSpd * math.pi) + 1) / 2) * 0.5)
            end
        else
            tH, tS, tV, tA = cpE.PickerHue, cpE.PickerSat, cpE.PickerVal, cpE.PickerAlpha
        end
        local col = Color3.fromHSV(tH, tS, tV)
        if hL and hL.Parent then
            hL.ImageColor3 = Color3.fromHSV(tH, 1, 1)
        end
        if aGrad and aGrad.Parent then
            aGrad.BackgroundColor3 = col
        end
        if hCS and hCS.Parent then
            hCS.Color = col
        end
        if aCS and aCS.Parent then
            aCS.Color = col
        end
        animC(svC, UDim2.new(math.clamp(tS, 0, 1), -7, math.clamp(1 - tV, 0, 1), -7))
        animC(hC, UDim2.new(math.clamp(tH, 0, 1), -6, 0.5, 0))
        animC(aC, UDim2.new(math.clamp(tA, 0, 1), -6, 0.5, 0))
        local br = tV
        if svC and svC.Parent and iC and iC.Parent then
            if br > 0.5 then
                svC.BackgroundColor3 = Color3.new(0, 0, 0)
                iC.BackgroundColor3 = Color3.new(1, 1, 1)
            else
                svC.BackgroundColor3 = Color3.new(1, 1, 1)
                iC.BackgroundColor3 = Color3.new(0, 0, 0)
            end
        end
        if isTogCol then
            cpE:UpdateColorVisuals(col, tA, cpE.EffectData, true)
        else
            cpE:UpdateVisuals(col, tA, cpE.EffectData, true)
        end
    end
    local svDrag = false
    cSq.InputBegan:Connect(
        function(inp)
            if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                svDrag = true
                local rX = math.clamp((inp.Position.X - cSq.AbsolutePosition.X) / cSq.AbsoluteSize.X, 0, 1)
                local rY = math.clamp((inp.Position.Y - cSq.AbsolutePosition.Y) / cSq.AbsoluteSize.Y, 0, 1)
                cpE.PickerSat, cpE.PickerVal = rX, 1 - rY
                if not (cpE.EffectData.IsRainbow or cpE.EffectData.IsPulsing) then
                    cpE.ManualSat, cpE.ManualVal = cpE.PickerSat, cpE.PickerVal
                end
                _updUICol(false)
            end
        end
    )
    local hueDrag = false
    hSli.InputBegan:Connect(
        function(inp)
            if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                hueDrag = true
                local rX = math.clamp((inp.Position.X - hSli.AbsolutePosition.X) / hSli.AbsoluteSize.X, 0, 1)
                cpE.PickerHue = rX
                if not (cpE.EffectData.IsRainbow or cpE.EffectData.IsPulsing) then
                    cpE.ManualHue = cpE.PickerHue
                end
                _updUICol(false)
            end
        end
    )
    local alpDrag = false
    aSli.InputBegan:Connect(
        function(inp)
            if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                alpDrag = true
                local rX = math.clamp((inp.Position.X - aSli.AbsolutePosition.X) / aSli.AbsoluteSize.X, 0, 1)
                cpE.PickerAlpha = rX
                cpE.ManualAlpha = cpE.PickerAlpha
                _updUICol(false)
            end
        end
    )
    local mInChConn
    mInChConn =
        LibUserInputService.InputChanged:Connect(
        function(inp)
            if inp.UserInputType == Enum.UserInputType.MouseMovement then
                if svDrag then
                    local rX = math.clamp((inp.Position.X - cSq.AbsolutePosition.X) / cSq.AbsoluteSize.X, 0, 1)
                    local rY = math.clamp((inp.Position.Y - cSq.AbsolutePosition.Y) / cSq.AbsoluteSize.Y, 0, 1)
                    cpE.PickerSat, cpE.PickerVal = rX, 1 - rY
                    if not (cpE.EffectData.IsRainbow or cpE.EffectData.IsPulsing) then
                        cpE.ManualSat, cpE.ManualVal = cpE.PickerSat, cpE.PickerVal
                    end
                    _updUICol(false)
                elseif hueDrag then
                    local rX = math.clamp((inp.Position.X - hSli.AbsolutePosition.X) / hSli.AbsoluteSize.X, 0, 1)
                    cpE.PickerHue = rX
                    if not (cpE.EffectData.IsRainbow or cpE.EffectData.IsPulsing) then
                        cpE.ManualHue = cpE.PickerHue
                    end
                    _updUICol(false)
                elseif alpDrag then
                    local rX = math.clamp((inp.Position.X - aSli.AbsolutePosition.X) / aSli.AbsoluteSize.X, 0, 1)
                    cpE.PickerAlpha = rX
                    cpE.ManualAlpha = cpE.PickerAlpha
                    _updUICol(false)
                end
            end
        end
    )
    local mInEndConn
    mInEndConn =
        LibUserInputService.InputEnded:Connect(
        function(inp)
            if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                svDrag = false
                hueDrag = false
                alpDrag = false
            end
        end
    )
    confBtn.MouseEnter:Connect(
        function()
            LibTweenService:Create(
                confBtn,
                TweenInfo.new(0.1),
                {BackgroundColor3 = Library.Theme.Accent:Lerp(Color3.new(1, 1, 1), 0.1)}
            ):Play()
        end
    )
    confBtn.MouseLeave:Connect(
        function()
            LibTweenService:Create(confBtn, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.Accent}):Play()
        end
    )
    cancBtn.MouseEnter:Connect(
        function()
            LibTweenService:Create(cancBtn, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.Element}):Play()
        end
    )
    cancBtn.MouseLeave:Connect(
        function()
            LibTweenService:Create(cancBtn, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.ElementAlt}):Play()
        end
    )
    local function clsPic(conf)
        if effUpdConn and effUpdConn.Connected then
            effUpdConn:Disconnect()
            effUpdConn = nil
        end
        local fCol, fA, fED
        if conf then
            fCol = Color3.fromHSV(cpE.ManualHue, cpE.ManualSat, cpE.ManualVal)
            fA = cpE.ManualAlpha
            fED = table_clone(cpE.EffectData)
        else
            fCol = cpE.OriginalColor
            fA = cpE.OriginalAlpha
            fED = table_clone(cpE.OriginalEffectData)
        end
        if isTogCol then
            cpE:UpdateColorVisuals(fCol, fA, fED, false)
        else
            cpE:UpdateVisuals(fCol, fA, fED, false)
        end
        mInChConn:Disconnect()
        mInEndConn:Disconnect()
        spdInChConn:Disconnect()
        spdInEndConn:Disconnect()
        local clsAnimI = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
        LibTweenService:Create(
            pF,
            clsAnimI,
            {Size = UDim2.new(pF.Size.X.Scale * 0.01, 0, pF.Size.Y.Scale * 0.01, 0), BackgroundTransparency = 1}
        ):Play()
        task.wait(clsAnimI.Time)
        if pF and pF.Parent then
            pF:Destroy()
        end
        Library.ActiveColorPicker = nil
        Library.ActiveColorPickerCpElement = nil
        Library:_DestroyModalOverlay()
    end
    confBtn.MouseButton1Click:Connect(
        function()
            clsPic(true)
        end
    )
    cancBtn.MouseButton1Click:Connect(
        function()
            clsPic(false)
        end
    )
    pF.Size =
        UDim2.new(
        ConfigurableSettings.NewColorPickerSize.X.Scale * 0.01,
        0,
        ConfigurableSettings.NewColorPickerSize.Y.Scale * 0.01,
        0
    )

    pF.BackgroundTransparency = 1
    LibTweenService:Create(
        pF,
        TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
        {Size = ConfigurableSettings.NewColorPickerSize, BackgroundTransparency = 0}
    ):Play()
    MakeDraggable(pF, tB)
    cpE.PickerFrame = pF
    if cpE.EffectData.IsRainbow or cpE.EffectData.IsPulsing then
        if not effUpdConn or not effUpdConn.Connected then
            effUpdConn =
                LibRunService.RenderStepped:Connect(
                function()
                    _updUICol(true)
                end
            )
        end
    end
    _updUICol(cpE.EffectData.IsRainbow or cpE.EffectData.IsPulsing)
end
function Library:_UpdateActiveColorPickerTheme()
    if not self.ActiveColorPicker or not self.ActiveColorPicker.Parent then
        return
    end
    local p = self.ActiveColorPicker
    p.BackgroundColor3 = self.Theme.BackgroundAlt
    local s = p:FindFirstChildOfClass("UIStroke")
    if s then
        s.Color = self.Theme.Border
    end
    local tB = p:FindFirstChild("Frame", true)
    if tB and tB.Name == "TitleBar" then
        tB.BackgroundColor3 = self.Theme.Element
        local tF = tB:FindFirstChild("Frame", true)
        if tF and tF.Name == "TitleFix" then
            tF.BackgroundColor3 = self.Theme.Element
        end
        local tT = tB:FindFirstChildOfClass("TextLabel")
        if tT then
            tT.TextColor3 = self.Theme.Text
        end
    end
    for _, b in ipairs(p:GetDescendants()) do
        if b:IsA("TextButton") then
            if b.Name == "Confirm" then
                b.BackgroundColor3 = self.Theme.Accent
                b.TextColor3 = self.Theme.TextOnAccent
            elseif b.Name == "CancelBtn" then
                b.BackgroundColor3 = self.Theme.ElementAlt
                b.TextColor3 = self.Theme.Text
            elseif b.Parent and b.Parent.Name == "copyPasteContainer" then
                b.BackgroundColor3 = self.Theme.Element
                b.TextColor3 =
                    (b.Text == "Paste" and not Library.ColorClipboard) and self.Theme.TextDark or self.Theme.Text
            end
        elseif b:IsA("TextLabel") then
            if b.Text == "Rainbow" or b.Text == "Pulse" or string.sub(b.Text, 1, 7) == "Speed: " then
                b.TextColor3 = self.Theme.Text
            end
        elseif b:IsA("Frame") then
            if b.Name == "Box" and b.Parent and b.Parent.Parent and b.Parent.Parent.Name == "effectsContainer" then
                local cI = b:FindFirstChild("Check")
                if cI then
                    b.BackgroundColor3 = cI.ImageTransparency == 0 and self.Theme.Accent or self.Theme.ElementAlt
                    cI.ImageColor3 = self.Theme.TextOnAccent
                end
            elseif b.Parent and b.Parent.Name == "speedSliderHolder" and b.Name ~= "speedLabel" then
                if b.Name == "speedTrack" then
                    b.BackgroundColor3 = Library.Theme.ElementAlt
                    local f = b:FindFirstChildOfClass("Frame")
                    if f then
                        f.BackgroundColor3 = Library.Theme.Accent
                    end
                end
            end
        end
    end
end





function Library:Window(config)
    local window = {
        Title = config.Title or "Window",
        Size = config.Size or ConfigurableSettings.WindowSize,
        Tabs = {},
        ActiveTab = nil,
        Minimized = false,
        Frame = nil,
        TitleBar = nil,
        TitleText = nil,
        TabHolder = nil,
        Content = nil,
        ElementsToTheme = {}
    }
    window.Frame =
        Create(
        "Frame",
        {
            Name = "Window_" .. window.Title,
            Size = window.Size,
            Position = UDim2.new(0.5, -window.Size.X.Offset / 2, 0.5, -window.Size.Y.Offset / 2),
            BackgroundColor3 = self.Theme.Background,
            BorderSizePixel = 0,
            Parent = UIScreenGui,
            ZIndex = Library.ZIndex
        }
    )
    table.insert(window.ElementsToTheme, {window.Frame, "BackgroundColor3", "Background"})
    Create("UICorner", {Parent = window.Frame, CornerRadius = ConfigurableSettings.CornerRadius})
    local borderGradient =
        Create(
        "UIStroke",
        {Name = "MainStroke", Parent = window.Frame, Color = self.Theme.Border, Thickness = 1, Transparency = 0}
    )
    table.insert(window.ElementsToTheme, {borderGradient, "Color", "Border"})
    Create(
        "ImageLabel",
        {
            Name = "Shadow",
            Size = UDim2.new(1, 15, 1, 15),
            Position = UDim2.new(0.5, 0, 0.5, 2),
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundTransparency = 1,
            Image = "rbxassetid://1316045217",
            ImageColor3 = Color3.fromRGB(0, 0, 0),
            ImageTransparency = 0.8,
            ScaleType = Enum.ScaleType.Slice,
            SliceCenter = Rect.new(10, 10, 118, 118),
            Parent = window.Frame,
            ZIndex = window.Frame.ZIndex - 1
        }
    )
    window.TitleBar =
        Create(
        "Frame",
        {
            Name = "TitleBar",
            Size = UDim2.new(1, 0, 0, 30),
            BackgroundColor3 = self.Theme.BackgroundAlt,
            BorderSizePixel = 0,
            Parent = window.Frame
        }
    )
    table.insert(window.ElementsToTheme, {window.TitleBar, "BackgroundColor3", "BackgroundAlt"})
    Create("UICorner", {Parent = window.TitleBar, CornerRadius = ConfigurableSettings.CornerRadius})
    local titleFix =
        Create(
        "Frame",
        {
            Name = "TitleFix",
            Size = UDim2.new(1, 0, 0, ConfigurableSettings.CornerRadius.Offset),
            Position = UDim2.new(0, 0, 1, -ConfigurableSettings.CornerRadius.Offset),
            BackgroundColor3 = self.Theme.BackgroundAlt,
            BorderSizePixel = 0,
            Parent = window.TitleBar
        }
    )
    if titleFix then
        table.insert(window.ElementsToTheme, {titleFix, "BackgroundColor3", "BackgroundAlt"})
    end
    Create(
        "UIGradient",
        {
            Parent = window.TitleBar,
            Rotation = 90,
            Transparency = NumberSequence.new {NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(1, 0.1)}
        }
    )
    local accentLine =
        Create(
        "Frame",
        {
            Size = UDim2.new(1, 0, 0, 1),
            BackgroundColor3 = self.Theme.Accent,
            BorderSizePixel = 0,
            Parent = window.TitleBar
        }
    )
    table.insert(window.ElementsToTheme, {accentLine, "BackgroundColor3", "Accent"})
    Create(
        "UIGradient",
        {
            Parent = accentLine,
            Transparency = NumberSequence.new {
                NumberSequenceKeypoint.new(0, 0.7),
                NumberSequenceKeypoint.new(0.5, 0),
                NumberSequenceKeypoint.new(1, 0.7)
            }
        }
    )
    window.TitleText =
        Create(
        "TextLabel",
        {
            Name = "TitleText",
            Size = UDim2.new(0.5, 0, 1, 0),
            Position = UDim2.new(0, 10, 0, 0),
            BackgroundTransparency = 1,
            Text = window.Title,
            TextColor3 = self.Theme.Text,
            TextSize = ConfigurableSettings.TitleFontSize,
            Font = Enum.Font.GothamBold,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = window.TitleBar
        }
    )
    table.insert(window.ElementsToTheme, {window.TitleText, "TextColor3", "Text"})
    local ctrls =
        Create(
        "Frame",
        {
            Name = "Controls",
            Size = UDim2.new(0, 60, 1, 0),
            Position = UDim2.new(1, -60, 0, 0),
            BackgroundTransparency = 1,
            Parent = window.TitleBar
        }
    )
    local min =
        Create(
        "TextButton",
        {
            Name = "Minimize",
            Size = UDim2.new(0, 30, 1, 0),
            BackgroundTransparency = 1,
            Text = "_",
            TextColor3 = self.Theme.TextDark,
            TextSize = 16,
            Font = Enum.Font.Gotham,
            Parent = ctrls
        }
    )
    table.insert(window.ElementsToTheme, {min, "TextColor3", "TextDark"})
    local cls =
        Create(
        "TextButton",
        {
            Name = "Close",
            Size = UDim2.new(0, 30, 1, 0),
            Position = UDim2.new(0, 30, 0, 0),
            BackgroundTransparency = 1,
            Text = "×",
            TextColor3 = Color3.fromRGB(255, 100, 100),
            TextSize = 20,
            Font = Enum.Font.Gotham,
            Parent = ctrls
        }
    )
    window.TabHolder =
        Create(
        "ScrollingFrame",
        {
            Name = "TabHolder",
            Size = UDim2.new(1, -10, 0, 30),
            Position = UDim2.new(0, 5, 0, 35),
            BackgroundTransparency = 1,
            Parent = window.Frame,
            ScrollBarThickness = 0,
            ScrollingDirection = Enum.ScrollingDirection.X,
            CanvasSize = UDim2.new(0, 0, 0, 30),
            ClipsDescendants = true
        }
    )
    local tabLayout =
        Create(
        "UIListLayout",
        {
            Parent = window.TabHolder,
            FillDirection = Enum.FillDirection.Horizontal,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 5)
        }
    )
    AddConnection(
        tabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(
            function()
                window.TabHolder.CanvasSize = UDim2.new(0, tabLayout.AbsoluteContentSize.X, 0, 30)
            end
        )
    )
    window.Content =
        Create(
        "Frame",
        {
            Name = "ContentFrame",
            Size = UDim2.new(1, -10, 1, -75),
            Position = UDim2.new(0, 5, 0, 70),
            BackgroundColor3 = self.Theme.BackgroundAlt,
            BorderSizePixel = 0,
            Parent = window.Frame
        }
    )
    table.insert(window.ElementsToTheme, {window.Content, "BackgroundColor3", "BackgroundAlt"})
    Create("UICorner", {Parent = window.Content, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    local cS =
        Create(
        "UIStroke",
        {Name = "ContentStroke", Parent = window.Content, Color = self.Theme.Border, Thickness = 1, Transparency = 0.6}
    )
    table.insert(window.ElementsToTheme, {cS, "Color", "Border"})
    min.MouseButton1Click:Connect(
        function()
            window.Minimized = not window.Minimized
            if window.Minimized then
                window.Content.Visible, window.TabHolder.Visible = false, false
                LibTweenService:Create(window.Frame, TweenInfo.new(0.2), {Size = UDim2.new(0, 300, 0, 30)}):Play()
            else
                LibTweenService:Create(window.Frame, TweenInfo.new(0.2), {Size = window.Size}):Play()
                task.wait(0.2)
                window.Content.Visible, window.TabHolder.Visible = true, true
            end
        end
    )
    cls.MouseButton1Click:Connect(
        function()
            Library:Unload()
        end
    )
    MakeDraggable(window.Frame, window.TitleBar)

    function window:Tab(name)
        local tab = {
            Name = name, 
            Sections = {}, 
            Content = nil, 
            Button = nil, 
            ElementsToTheme = {},
            IsActive = false
        }
        
        -- Enhanced tab button with modern styling
        tab.Button = Create("TextButton", {
            Name = "TabButton_" .. name,
            Size = UDim2.new(0, 0, 1, 0), -- Auto-size based on text
            BackgroundColor3 = Library.Theme.Element,
            BorderSizePixel = 0,
            Text = name,
            TextColor3 = Library.Theme.TextDark,
            TextSize = ConfigurableSettings.DefaultFontSize,
            Font = Enum.Font.Gotham,
            Parent = window.TabHolder,
            AutomaticSize = Enum.AutomaticSize.X
        })
        
        -- Add padding to tab buttons
        Create("UIPadding", {
            Parent = tab.Button,
            PaddingLeft = UDim.new(0, 12),
            PaddingRight = UDim.new(0, 12),
            PaddingTop = UDim.new(0, 4),
            PaddingBottom = UDim.new(0, 4)
        })
        
        table.insert(window.ElementsToTheme, {tab.Button, "BackgroundColor3", "Element", {active = "Accent"}})
        table.insert(window.ElementsToTheme, {tab.Button, "TextColor3", "TextDark", {active = "TextOnAccent"}})
        Create("UICorner", {Parent = tab.Button, CornerRadius = ConfigurableSettings.SmallCornerRadius})
        
        -- Add subtle border/stroke
        local buttonStroke = Create("UIStroke", {
            Parent = tab.Button,
            Color = Library.Theme.Border,
            Thickness = 1,
            Transparency = 0.7
        })
        table.insert(window.ElementsToTheme, {buttonStroke, "Color", "Border"})
        
        -- Enhanced hover effects with smooth animations
        local isHovering = false
        tab.Button.MouseEnter:Connect(function()
            isHovering = true
            if not tab.IsActive then
                -- Smooth hover animation
                LibTweenService:Create(tab.Button, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                    BackgroundColor3 = Library.Theme.ElementAlt
                }):Play()
                LibTweenService:Create(buttonStroke, TweenInfo.new(0.2), {
                    Transparency = 0.4
                }):Play()
                LibTweenService:Create(tab.Button, TweenInfo.new(0.2), {
                    TextColor3 = Library.Theme.Text
                }):Play()
            end
        end)
        
        tab.Button.MouseLeave:Connect(function()
            isHovering = false
            if not tab.IsActive then
                -- Smooth unhover animation
                LibTweenService:Create(tab.Button, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                    BackgroundColor3 = Library.Theme.Element
                }):Play()
                LibTweenService:Create(buttonStroke, TweenInfo.new(0.2), {
                    Transparency = 0.7
                }):Play()
                LibTweenService:Create(tab.Button, TweenInfo.new(0.2), {
                    TextColor3 = Library.Theme.TextDark
                }):Play()
            end
        end)
        
        -- Enhanced tab content with better styling
        tab.Content = Create("ScrollingFrame", {
            Name = "TabContent_" .. name,
            Size = UDim2.new(1, -10, 1, -10),
            Position = UDim2.new(0, 5, 0, 5),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ScrollBarThickness = 3,
            ScrollBarImageColor3 = Library.Theme.Accent,
            ScrollBarImageTransparency = 0.3,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            Visible = false,
            Parent = window.Content,
            ElasticBehavior = Enum.ElasticBehavior.WhenScrollable
        })
        
        table.insert(window.ElementsToTheme, {tab.Content, "ScrollBarImageColor3", "Accent"})
        
        local lyt = Create("UIListLayout", {
            Parent = tab.Content,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = ConfigurableSettings.SectionPadding
        })
        
        AddConnection(lyt:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tab.Content.CanvasSize = UDim2.new(0, 0, 0, lyt.AbsoluteContentSize.Y + ConfigurableSettings.SectionPadding.Offset)
        end))
        
        -- Enhanced tab selection with smooth transitions
        function tab:Select()
            -- Don't do anything if this tab is already active
            if tab.IsActive then
                return
            end
            
            -- Deselect all other tabs with faster animation
            for _, t in pairs(window.Tabs) do
                if t ~= tab then -- Don't process the current tab
                    t.IsActive = false
                    
                    -- Faster animation for inactive tabs
                    LibTweenService:Create(t.Button, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {
                        BackgroundColor3 = Library.Theme.Element
                    }):Play()
                    LibTweenService:Create(t.Button, TweenInfo.new(0.15), {
                        TextColor3 = Library.Theme.TextDark
                    }):Play()
                    
                    local tStroke = t.Button:FindFirstChildOfClass("UIStroke")
                    if tStroke then
                        LibTweenService:Create(tStroke, TweenInfo.new(0.15), {
                            Color = Library.Theme.Border,
                            Transparency = 0.7
                        }):Play()
                    end
                    
                    -- Instantly hide content - no fade animation needed
                    t.Content.Visible = false
                end
            end
            
            -- Select this tab with faster animation
            tab.IsActive = true
            
            -- Faster animation for active tab
            LibTweenService:Create(tab.Button, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                BackgroundColor3 = Library.Theme.Accent
            }):Play()
            LibTweenService:Create(tab.Button, TweenInfo.new(0.2), {
                TextColor3 = Library.Theme.TextOnAccent
            }):Play()
            
            local activeStroke = tab.Button:FindFirstChildOfClass("UIStroke")
            if activeStroke then
                LibTweenService:Create(activeStroke, TweenInfo.new(0.2), {
                    Color = Library.Theme.Accent,
                    Transparency = 0
                }):Play()
            end
            
            -- Show content immediately
            tab.Content.Visible = true
            tab.Content.ScrollBarImageTransparency = 0.3
            
            window.ActiveTab = tab
        end
        
        -- Enhanced click handler with ripple effect
        tab.Button.MouseButton1Click:Connect(function()
            -- Prevent double-clicking the same tab
            if tab.IsActive then
                return -- Do nothing if already active
            end
            
            -- Add faster ripple effect
            local ripple = Create("Frame", {
                Size = UDim2.new(0, 0, 0, 0),
                Position = UDim2.new(0.5, 0, 0.5, 0),
                AnchorPoint = Vector2.new(0.5, 0.5),
                BackgroundColor3 = Library.Theme.TextOnAccent,
                BackgroundTransparency = 0.7,
                Parent = tab.Button,
                ZIndex = tab.Button.ZIndex + 1
            })
            Create("UICorner", {Parent = ripple, CornerRadius = UDim.new(0.5, 0)})
            
            -- Faster ripple animation
            local rippleSize = math.max(tab.Button.AbsoluteSize.X, tab.Button.AbsoluteSize.Y) * 1.2
            local rippleAnim = LibTweenService:Create(ripple, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {
                Size = UDim2.new(0, rippleSize, 0, rippleSize),
                BackgroundTransparency = 1
            })
            rippleAnim:Play()
            rippleAnim.Completed:Connect(function()
                ripple:Destroy()
            end)
            
            tab:Select()
        end)
        
        -- Enhanced section function remains the same, but with better styling
        function tab:Section(name)
            local section = {Name = name, Elements = {}, Frame = nil, ElementsToTheme = {}}
            
            section.Frame = Create("Frame", {
                Name = "Section_" .. name,
                Size = UDim2.new(1, 0, 0, 30),
                BackgroundColor3 = Library.Theme.Element,
                BorderSizePixel = 0,
                Parent = tab.Content
            })
            table.insert(window.ElementsToTheme, {section.Frame, "BackgroundColor3", "Element"})
            Create("UICorner", {Parent = section.Frame, CornerRadius = ConfigurableSettings.CornerRadius})
            
            -- Enhanced section styling with subtle shadow
            local sS = Create("UIStroke", {
                Name = "Stroke",
                Parent = section.Frame,
                Color = Library.Theme.Border,
                Thickness = 1,
                Transparency = 0.8
            })
            table.insert(window.ElementsToTheme, {sS, "Color", "Border"})
            
            -- Add subtle inner shadow effect
            local innerShadow = Create("Frame", {
                Name = "InnerShadow",
                Size = UDim2.new(1, 0, 0, 1),
                Position = UDim2.new(0, 0, 0, 0),
                BackgroundColor3 = Library.Theme.Border,
                BackgroundTransparency = 0.9,
                BorderSizePixel = 0,
                Parent = section.Frame
            })
            
            local hdr = Create("Frame", {
                Name = "Header", 
                Size = UDim2.new(1, 0, 0, 25), 
                BackgroundTransparency = 1, 
                Parent = section.Frame
            })
            
            local headerBg = Create("Frame", {
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundColor3 = Library.Theme.Element,
                BorderSizePixel = 0,
                Parent = hdr
            })
            table.insert(window.ElementsToTheme, {headerBg, "BackgroundColor3", "Element"})
            Create("UICorner", {Parent = headerBg, CornerRadius = ConfigurableSettings.CornerRadius})
            
            local headerBgFix = Create("Frame", {
                Name = "HeaderBgFix",
                Size = UDim2.new(1, 0, 0, ConfigurableSettings.CornerRadius.Offset),
                Position = UDim2.new(0, 0, 1, -ConfigurableSettings.CornerRadius.Offset),
                BackgroundColor3 = Library.Theme.Element,
                BorderSizePixel = 0,
                Parent = headerBg
            })
            table.insert(window.ElementsToTheme, {headerBgFix, "BackgroundColor3", "Element"})
            
            -- Enhanced header with icon and better typography
            local hT = Create("TextLabel", {
                Name = "HeaderText",
                Size = UDim2.new(1, -15, 1, 0),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                Text = "▸ " .. name, -- Add arrow icon
                TextColor3 = Library.Theme.Accent,
                TextSize = ConfigurableSettings.DefaultFontSize,
                Font = Enum.Font.GothamBold,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = hdr,
                ZIndex = hdr.ZIndex + 1
            })
            table.insert(window.ElementsToTheme, {hT, "TextColor3", "Accent"})
            
            local cntr = Create("Frame", {
                Name = "Container",
                Size = UDim2.new(1, -10, 1, -30),
                Position = UDim2.new(0, 5, 0, 25),
                BackgroundTransparency = 1,
                Parent = section.Frame
            })
            
            local cLyt = Create("UIListLayout", {
                Parent = cntr, 
                SortOrder = Enum.SortOrder.LayoutOrder, 
                Padding = ConfigurableSettings.ElementPadding
            })
            
            AddConnection(cLyt:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                section.Frame.Size = UDim2.new(1, 0, 0, cLyt.AbsoluteContentSize.Y + 30 + ConfigurableSettings.ElementPadding.Offset)
            end))

            function section:Separator()
                local sepHeight = ConfigurableSettings.SeparatorHeight
                local hldr =
                    Create("Frame", {Size = UDim2.new(1, 0, 0, sepHeight), BackgroundTransparency = 1, Parent = cntr})
                local line =
                    Create(
                    "Frame",
                    {
                        Name = "SeparatorLine",
                        Size = UDim2.new(1, -10, 0, 1),
                        Position = UDim2.new(0, 5, 0.5, -0.5),
                        BackgroundColor3 = Library.Theme.Border,
                        BorderSizePixel = 0,
                        Parent = hldr
                    }
                )
                table.insert(window.ElementsToTheme, {line, "BackgroundColor3", "Border"})
                return line
            end
            function section:Label(cfg)
                local lblText = cfg.Text or cfg.Name or "Label"
                local lblHeight = cfg.Height or ConfigurableSettings.LabelHeight
                local risky = cfg.risky or false
                local hldr =
                    Create("Frame", {Size = UDim2.new(1, 0, 0, lblHeight), BackgroundTransparency = 1, Parent = cntr})
                if cfg.tooltip and cfg.tooltiptext then
                    AddConnection(
                        hldr.MouseEnter:Connect(
                            function()
                                Library:ShowTooltip(cfg.tooltiptext, hldr)
                            end
                        )
                    )
                    AddConnection(
                        hldr.MouseLeave:Connect(
                            function()
                                Library:HideTooltip()
                            end
                        )
                    )
                end
                local displayText = lblText
                if risky then
                    displayText = displayText .. " ⚠️"
                end
                local textLabel =
                    Create(
                    "TextLabel",
                    {
                        Name = "InfoLabel",
                        Size = UDim2.new(1, 0, 1, 0),
                        BackgroundTransparency = 1,
                        Text = displayText,
                        TextColor3 = risky and (Library.Theme.TextRisky or ConfigurableSettings.RiskyColor) or
                            (cfg.TextColor or Library.Theme.TextDark),
                        TextSize = cfg.TextSize or ConfigurableSettings.SmallFontSize,
                        Font = cfg.Font or Enum.Font.Gotham,
                        TextXAlignment = cfg.TextXAlignment or Enum.TextXAlignment.Left,
                        TextYAlignment = cfg.TextYAlignment or Enum.TextYAlignment.Center,
                        Parent = hldr
                    }
                )
                if not risky then
                    table.insert(
                        window.ElementsToTheme,
                        {textLabel, "TextColor3", cfg.TextColor and "Custom" or "TextDark"}
                    )
                end
                return textLabel
            end
            function section:Toggle(cfg)
                local tglName = cfg.Name or "Toggle"
                local initVal = cfg.Default ~= nil and cfg.Default or false
                local tgl = {
                    Name = tglName,
                    Enabled = initVal,
                    Callback = cfg.Callback or function()
                        end,
                    Flag = cfg.Flag,
                    Risky = cfg.risky or false,
                    TooltipEnabled = cfg.tooltip or false,
                    TooltipText = cfg.tooltiptext or "",
                    EnableColorPicker = cfg.EnableColorPicker or false,
                    ValueColor = cfg.DefaultColor or Color3.fromRGB(255, 255, 255),
                    ValueAlpha = cfg.DefaultAlpha or 1,
                    EffectData = table_clone(
                        cfg.DefaultEffectData or {IsRainbow = false, IsPulsing = false, EffectSpeed = 5}
                    ),
                    PickerFrame = nil,
                    CheckboxFrame = nil,
                    ColorDisplayButton = nil
                }
                if tgl.EnableColorPicker then
                    local h, s, v = tgl.ValueColor:ToHSV()
                    tgl.Hue, tgl.Sat, tgl.Val, tgl.Alpha = h, s, v, tgl.ValueAlpha
                    tgl.ManualHue, tgl.ManualSat, tgl.ManualVal, tgl.ManualAlpha = h, s, v, tgl.Alpha
                    tgl.OriginalColor, tgl.OriginalAlpha, tgl.OriginalEffectData =
                        tgl.ValueColor,
                        tgl.ValueAlpha,
                        table_clone(tgl.EffectData)
                end
                local hldrHeight = ConfigurableSettings.ElementHeight
                local hldr =
                    Create("Frame", {Size = UDim2.new(1, 0, 0, hldrHeight), BackgroundTransparency = 1, Parent = cntr})
                local boxSize = 16
                tgl.CheckboxFrame =
                    Create(
                    "Frame",
                    {
                        Name = "Box",
                        Size = UDim2.new(0, boxSize, 0, boxSize),
                        Position = UDim2.new(0, 0, 0.5, -boxSize / 2),
                        BackgroundColor3 = tgl.Enabled and Library.Theme.Accent or Library.Theme.ElementAlt,
                        Parent = hldr
                    }
                )
                table.insert(window.ElementsToTheme, {tgl.CheckboxFrame, "BackgroundColor3", "ElementAlt"})
                Create("UICorner", {Parent = tgl.CheckboxFrame, CornerRadius = ConfigurableSettings.SmallCornerRadius})
                local bS =
                    Create(
                    "UIStroke",
                    {Parent = tgl.CheckboxFrame, Color = Library.Theme.Border, Thickness = 1, Transparency = 0.5}
                )
                table.insert(window.ElementsToTheme, {bS, "Color", "Border"})
                local chk =
                    Create(
                    "ImageLabel",
                    {
                        Name = "Check",
                        Size = UDim2.new(1, -4, 1, -4),
                        Position = UDim2.new(0, 2, 0, 2),
                        BackgroundTransparency = 1,
                        Image = "rbxassetid://4555411759",
                        ImageColor3 = Library.Theme.TextOnAccent,
                        ImageTransparency = tgl.Enabled and 0 or 1,
                        Parent = tgl.CheckboxFrame
                    }
                )
                table.insert(window.ElementsToTheme, {chk, "ImageColor3", "TextOnAccent"})
                local labelXOffset = boxSize + 8
                local labelWidthOffset = -labelXOffset
                if tgl.EnableColorPicker then
                    labelWidthOffset = -(labelXOffset + 40 + 5)
                    tgl.ColorDisplayButton =
                        Create(
                        "TextButton",
                        {
                            Name = "ToggleColorDisplay",
                            Size = UDim2.new(0, 40, 0, hldrHeight - 4),
                            Position = UDim2.new(1, -40, 0.5, -(hldrHeight - 4) / 2),
                            BackgroundColor3 = tgl.ValueColor,
                            Text = "",
                            Parent = hldr
                        }
                    )
                    Create(
                        "UICorner",
                        {Parent = tgl.ColorDisplayButton, CornerRadius = ConfigurableSettings.SmallCornerRadius}
                    )
                    local cdS =
                        Create(
                        "UIStroke",
                        {
                            Parent = tgl.ColorDisplayButton,
                            Color = Library.Theme.Border,
                            Thickness = 1,
                            Transparency = 0.5
                        }
                    )
                    table.insert(window.ElementsToTheme, {cdS, "Color", "Border"})
                    local cdAO =
                        Create(
                        "Frame",
                        {
                            Name = "AlphaOverlay",
                            Size = UDim2.fromScale(1, 1),
                            BackgroundColor3 = Color3.new(0, 0, 0),
                            BackgroundTransparency = 1 - tgl.ValueAlpha,
                            Parent = tgl.ColorDisplayButton,
                            ZIndex = tgl.ColorDisplayButton.ZIndex + 1
                        }
                    )
                    Create("UICorner", {Parent = cdAO, CornerRadius = ConfigurableSettings.SmallCornerRadius})
                    tgl.ColorDisplayButton.MouseButton1Click:Connect(function()
                        if Library.ActiveColorPicker and Library.ActiveColorPickerCpElement and Library.ActiveColorPickerCpElement ~= tgl then
                            local oldActivePicker = Library.ActiveColorPicker
                            if oldActivePicker and oldActivePicker.Parent then
                                oldActivePicker:Destroy()
                            end
                            Library:_DestroyModalOverlay()
                            Library.ActiveColorPicker = nil
                            Library.ActiveColorPickerCpElement = nil
                        end
                    
                        if tgl.PickerFrame and tgl.PickerFrame.Parent then 
                            tgl.PickerFrame:Destroy()
                            Library:_DestroyModalOverlay()
                            tgl.PickerFrame = nil
                            Library.ActiveColorPicker = nil
                            Library.ActiveColorPickerCpElement = nil
                            return
                        end
                        
                        tgl.OriginalColor, tgl.OriginalAlpha, tgl.OriginalEffectData = tgl.ValueColor, tgl.ValueAlpha, table_clone(tgl.EffectData)
                        tgl.PickerHue, tgl.PickerSat, tgl.PickerVal, tgl.PickerAlpha = tgl.ManualHue, tgl.ManualSat, tgl.ManualVal, tgl.ManualAlpha
                        Library:_CreateNewColorPickerUI(tgl, window.Frame, true)
                    end)
                end
                local dspTxt = tgl.Name
                if tgl.Risky then
                    dspTxt = dspTxt .. " ⚠️"
                end
                local lbl =
                    Create(
                    "TextLabel",
                    {
                        Size = UDim2.new(1, labelWidthOffset, 1, 0),
                        Position = UDim2.new(0, labelXOffset, 0, 0),
                        BackgroundTransparency = 1,
                        Text = dspTxt,
                        TextColor3 = tgl.Risky and (Library.Theme.TextRisky or ConfigurableSettings.RiskyColor) or
                            Library.Theme.Text,
                        TextSize = ConfigurableSettings.DefaultFontSize,
                        Font = Enum.Font.Gotham,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = hldr
                    }
                )
                if not tgl.Risky then
                    table.insert(window.ElementsToTheme, {lbl, "TextColor3", "Text"})
                end
                local iBtn =
                    Create(
                    "TextButton",
                    {
                        Name = "InteractionButton",
                        Size = UDim2.new(1, tgl.EnableColorPicker and -(40 + 5) or 0, 1, 0),
                        BackgroundTransparency = 1,
                        Text = "",
                        Parent = hldr,
                        ZIndex = hldr.ZIndex + 1
                    }
                )
                if tgl.TooltipEnabled and tgl.TooltipText ~= "" then
                    AddConnection(
                        iBtn.MouseEnter:Connect(
                            function()
                                Library:ShowTooltip(tgl.TooltipText, iBtn)
                            end
                        )
                    )
                    AddConnection(
                        iBtn.MouseLeave:Connect(
                            function()
                                Library:HideTooltip()
                            end
                        )
                    )
                end
                function tgl:SetEnabled(v)
                    tgl.Enabled = v
                    if chk and chk.Parent then
                        LibTweenService:Create(chk, TweenInfo.new(0.15), {ImageTransparency = v and 0 or 1}):Play()
                    end
                    if tgl.CheckboxFrame and tgl.CheckboxFrame.Parent then
                        LibTweenService:Create(
                            tgl.CheckboxFrame,
                            TweenInfo.new(0.15),
                            {BackgroundColor3 = v and Library.Theme.Accent or Library.Theme.ElementAlt}
                        ):Play()
                    end
                    if tgl.Flag then
                        if tgl.EnableColorPicker then
                            Library.Flags[tgl.Flag] = {
                                enabled = v,
                                color = {
                                    R = tgl.ValueColor.R,
                                    G = tgl.ValueColor.G,
                                    B = tgl.ValueColor.B,
                                    A = tgl.ValueAlpha
                                },
                                EffectData = table_clone(tgl.EffectData)
                            }
                        else
                            Library.Flags[tgl.Flag] = v
                        end
                    end
                    if tgl.EnableColorPicker then
                        tgl.Callback(v, tgl.ValueColor, tgl.ValueAlpha, tgl.EffectData)
                    else
                        tgl.Callback(v)
                    end
                end
                function tgl:UpdateColorVisuals(color, alpha, effectData, isPreview)
                    local h, s, v = color:ToHSV()
                    if not isPreview then
                        self.ValueColor = color
                        self.ValueAlpha = alpha
                        self.EffectData = table_clone(effectData or self.EffectData)
                        self.ManualHue, self.ManualSat, self.ManualVal, self.ManualAlpha = h, s, v, alpha
                        local eI = nil
                        for i, e in ipairs(Library.ActiveEffectElements) do
                            if e.element == self then
                                eI = i
                                break
                            end
                        end
                        if self.EffectData.IsRainbow or self.EffectData.IsPulsing then
                            local eD = {element = self, effectData = self.EffectData}
                            if eI then
                                Library.ActiveEffectElements[eI] = eD
                            else
                                table.insert(Library.ActiveEffectElements, eD)
                            end
                            if not Library.GlobalEffectConnection or not Library.GlobalEffectConnection.Connected then
                                Library.GlobalEffectConnection =
                                    LibRunService.RenderStepped:Connect(
                                    function()
                                        Library:UpdateGlobalEffects()
                                    end
                                )
                            end
                        elseif eI then
                            table.remove(Library.ActiveEffectElements, eI)
                        end
                        if self.Flag then
                            Library.Flags[self.Flag] = {
                                enabled = self.Enabled,
                                color = {
                                    R = self.ValueColor.R,
                                    G = self.ValueColor.G,
                                    B = self.ValueColor.B,
                                    A = self.ValueAlpha
                                },
                                EffectData = table_clone(self.EffectData)
                            }
                        end
                        self.Callback(self.Enabled, self.ValueColor, self.ValueAlpha, self.EffectData)
                    else
                        if not (effectData and (effectData.IsRainbow or effectData.IsPulsing)) then
                            self.Hue, self.Sat, self.Val = h, s, v
                        end
                        self.Alpha = alpha
                    end
                    if self.ColorDisplayButton and self.ColorDisplayButton.Parent then
                        self.ColorDisplayButton.BackgroundColor3 = color
                        local aO = self.ColorDisplayButton:FindFirstChild("AlphaOverlay")
                        if aO then
                            aO.BackgroundTransparency = 1 - alpha
                        end
                    end
                end
                iBtn.MouseButton1Click:Connect(
                    function()
                        tgl:SetEnabled(not tgl.Enabled)
                    end
                )
                if tgl.Flag then
                    Library.Options[tgl.Flag] = tgl
                    local fV = Library.Flags[tgl.Flag]
                    if tgl.EnableColorPicker then
                        if type(fV) == "table" and fV.enabled ~= nil and fV.color then
                            tgl:SetEnabled(fV.enabled)
                            local lC = Color3.new(fV.color.R, fV.color.G, fV.color.B)
                            local lA = fV.color.A or 1
                            local lED = table_clone(fV.EffectData or tgl.EffectData)
                            tgl:UpdateColorVisuals(lC, lA, lED, false)
                        else
                            tgl:SetEnabled(tgl.Enabled)
                            tgl:UpdateColorVisuals(tgl.ValueColor, tgl.ValueAlpha, tgl.EffectData, false)
                        end
                    elseif fV ~= nil then
                        tgl:SetEnabled(fV)
                    else
                        tgl:SetEnabled(tgl.Enabled)
                    end
                else
                    tgl:SetEnabled(tgl.Enabled)
                    if tgl.EnableColorPicker then
                        tgl:UpdateColorVisuals(tgl.ValueColor, tgl.ValueAlpha, tgl.EffectData, false)
                    end
                end
                return tgl
            end
            function section:Slider(cfg)
                local sldr = {
                    Name = cfg.Name or "Slider",
                    Min = cfg.Min or 0,
                    Max = cfg.Max or 100,
                    Value = cfg.Default or cfg.Min,
                    Suffix = cfg.Suffix or "",
                    Increment = cfg.Increment or 1,
                    Callback = cfg.Callback or function()
                        end,
                    Flag = cfg.Flag,
                    Risky = cfg.risky or false,
                    TooltipEnabled = cfg.tooltip or false,
                    TooltipText = cfg.tooltiptext or ""
                }
                local hldr =
                    Create(
                    "Frame",
                    {
                        Size = UDim2.new(1, 0, 0, ConfigurableSettings.SliderHolderHeight),
                        BackgroundTransparency = 1,
                        Parent = cntr
                    }
                )
                local dspTxt = sldr.Name
                if sldr.Risky then
                    dspTxt = dspTxt .. " ⚠️"
                end
                local lbl =
                    Create(
                    "TextLabel",
                    {
                        Size = UDim2.new(0.5, 0, 0, 15),
                        BackgroundTransparency = 1,
                        Text = dspTxt,
                        TextColor3 = sldr.Risky and (Library.Theme.TextRisky or ConfigurableSettings.RiskyColor) or
                            Library.Theme.Text,
                        TextSize = ConfigurableSettings.DefaultFontSize,
                        Font = Enum.Font.Gotham,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = hldr
                    }
                )
                if not sldr.Risky then
                    table.insert(window.ElementsToTheme, {lbl, "TextColor3", "Text"})
                end
                if sldr.TooltipEnabled and sldr.TooltipText ~= "" then
                    AddConnection(
                        hldr.MouseEnter:Connect(
                            function()
                                Library:ShowTooltip(sldr.TooltipText, hldr)
                            end
                        )
                    )
                    AddConnection(
                        hldr.MouseLeave:Connect(
                            function()
                                Library:HideTooltip()
                            end
                        )
                    )
                end
                local valBox =
                    Create(
                    "TextBox",
                    {
                        Name = "ValueTextBox",
                        Size = UDim2.new(0.4, 0, 0, ConfigurableSettings.ElementHeight - 2),
                        Position = UDim2.new(0.6, 0, 0.5, -(ConfigurableSettings.ElementHeight - 2) / 2),
                        BackgroundColor3 = Library.Theme.Element,
                        TextColor3 = Library.Theme.Accent,
                        TextSize = ConfigurableSettings.SmallFontSize,
                        Font = Enum.Font.Gotham,
                        TextXAlignment = Enum.TextXAlignment.Right,
                        ClearTextOnFocus = true,
                        Parent = hldr
                    }
                )
                table.insert(window.ElementsToTheme, {valBox, "BackgroundColor3", "Element"})
                table.insert(window.ElementsToTheme, {valBox, "TextColor3", "Accent"})
                table.insert(window.ElementsToTheme, {valBox, "PlaceholderColor3", "TextDark"})
                Create("UICorner", {Parent = valBox, CornerRadius = ConfigurableSettings.SmallCornerRadius})
                local sBg =
                    Create(
                    "Frame",
                    {
                        Size = UDim2.new(1, 0, 0, 6),
                        Position = UDim2.new(0, 0, 0, ConfigurableSettings.ElementHeight + 3),
                        BackgroundColor3 = Library.Theme.ElementAlt,
                        BorderSizePixel = 0,
                        Parent = hldr
                    }
                )
                table.insert(window.ElementsToTheme, {sBg, "BackgroundColor3", "ElementAlt"})
                Create("UICorner", {Parent = sBg, CornerRadius = UDim.new(0, 3)})
                local fil =
                    Create(
                    "Frame",
                    {Size = UDim2.new(0, 0, 1, 0), BackgroundColor3 = Library.Theme.Accent, Parent = sBg}
                )
                table.insert(window.ElementsToTheme, {fil, "BackgroundColor3", "Accent"})
                Create("UICorner", {Parent = fil, CornerRadius = UDim.new(0, 3)})
                local hnd =
                    Create(
                    "Frame",
                    {
                        Size = UDim2.new(0, 12, 0, 12),
                        Position = UDim2.new(0, -6, 0.5, -6),
                        BackgroundColor3 = Library.Theme.Text,
                        Parent = sBg
                    }
                )
                table.insert(window.ElementsToTheme, {hnd, "BackgroundColor3", "Text"})
                Create("UICorner", {Parent = hnd, CornerRadius = UDim.new(0, 6)})
                local hS = Create("UIStroke", {Parent = hnd, Color = Library.Theme.Accent, Thickness = 1.5})
                table.insert(window.ElementsToTheme, {hS, "Color", "Accent"})
                local drg = false
                function sldr:Set(valIn)
                    local val = tonumber(valIn)
                    if val == nil then
                        val = sldr.Value
                    end
                    val = math.clamp(val, sldr.Min, sldr.Max)
                    if sldr.Increment ~= 0 then
                        val = math.floor(val / sldr.Increment + 0.5) * sldr.Increment
                    end
                    val = tonumber(val) or sldr.Min
                    sldr.Value = val
                    local pct = 0
                    if (sldr.Max - sldr.Min) ~= 0 then
                        pct = (val - sldr.Min) / (sldr.Max - sldr.Min)
                    elseif val == sldr.Min then
                        pct = 0
                    end
                    local minPos = 0
                    local maxPos = 1
                    local handleRadius = hnd.AbsoluteSize.X / 2
                    local trackWidth = sBg.AbsoluteSize.X
                    if trackWidth > 0 then
                        minPos = handleRadius / trackWidth
                        maxPos = 1 - (handleRadius / trackWidth)
                    end
                    local clampedPctForHandle = math.clamp(pct, minPos, maxPos)
                    LibTweenService:Create(fil, TweenInfo.new(0.1), {Size = UDim2.new(pct, 0, 1, 0)}):Play()
                    LibTweenService:Create(
                        hnd,
                        TweenInfo.new(0.1),
                        {
                            Position = UDim2.new(
                                clampedPctForHandle,
                                -hnd.AbsoluteSize.X / 2,
                                0.5,
                                -hnd.AbsoluteSize.Y / 2
                            )
                        }
                    ):Play()
                    local prec
                    if sldr.Increment == 0 then
                        prec = 2
                    elseif sldr.Increment >= 1 and math.floor(sldr.Increment) == sldr.Increment then
                        prec = 0
                    else
                        local sI = tostring(sldr.Increment)
                        local dP = string.match(sI, "%.(%d+)")
                        prec = dP and #dP or 0
                    end
                    prec = math.clamp(prec, 0, 10)
                    local fmtVal = string.format("%." .. prec .. "f", val) .. sldr.Suffix
                    valBox.Text = fmtVal
                    valBox.PlaceholderText = fmtVal
                    if sldr.Flag then
                        Library.Flags[sldr.Flag] = val
                    end
                    sldr.Callback(val)
                end
                valBox.FocusLost:Connect(
                    function(eP)
                        if eP then
                            sldr:Set(valBox.Text)
                        else
                            local cTNum = tonumber(valBox.Text)
                            if valBox.Text == "" or cTNum == nil then
                                sldr:Set(sldr.Value)
                            else
                                sldr:Set(cTNum)
                            end
                        end
                    end
                )
                local function onDrag(iPV)
                    if not sBg.Parent then
                        drg = false
                        return
                    end
                    local lPX = math.clamp((iPV.X - sBg.AbsolutePosition.X) / sBg.AbsoluteSize.X, 0, 1)
                    sldr:Set(sldr.Min + (sldr.Max - sldr.Min) * lPX)
                end
                sBg.InputBegan:Connect(
                    function(i)
                        if i.UserInputType == Enum.UserInputType.MouseButton1 then
                            drg = true
                            onDrag(i.Position)
                        end
                    end
                )
                hnd.InputBegan:Connect(
                    function(i)
                        if i.UserInputType == Enum.UserInputType.MouseButton1 then
                            drg = true
                        end
                    end
                )
                AddConnection(
                    LibUserInputService.InputEnded:Connect(
                        function(i)
                            if i.UserInputType == Enum.UserInputType.MouseButton1 then
                                drg = false
                            end
                        end
                    )
                )
                AddConnection(
                    LibUserInputService.InputChanged:Connect(
                        function(i)
                            if drg and i.UserInputType == Enum.UserInputType.MouseMovement then
                                onDrag(i.Position)
                            end
                        end
                    )
                )
                if sldr.Flag then
                    Library.Options[sldr.Flag] = sldr
                    if Library.Flags[sldr.Flag] ~= nil then
                        sldr:Set(Library.Flags[sldr.Flag])
                    else
                        sldr:Set(sldr.Value)
                    end
                else
                    sldr:Set(sldr.Value)
                end
                return sldr
            end
            function section:Button(cfg)
                local btnEl = {
                    Name = cfg.Name or "Button",
                    Risky = cfg.risky or false,
                    TooltipEnabled = cfg.tooltip or false,
                    TooltipText = cfg.tooltiptext or ""
                }
                local dspTxt = btnEl.Name
                if btnEl.Risky then
                    dspTxt = dspTxt .. " ⚠️"
                end
                local btn =
                    Create(
                    "TextButton",
                    {
                        Size = UDim2.new(1, 0, 0, ConfigurableSettings.ButtonHeight),
                        BackgroundColor3 = Library.Theme.ElementAlt,
                        Text = dspTxt,
                        TextColor3 = btnEl.Risky and (Library.Theme.TextRisky or ConfigurableSettings.RiskyColor) or
                            Library.Theme.Text,
                        TextSize = ConfigurableSettings.DefaultFontSize,
                        Font = Enum.Font.Gotham,
                        Parent = cntr
                    }
                )
                if not btnEl.Risky then
                    table.insert(window.ElementsToTheme, {btn, "TextColor3", "Text"})
                end
                table.insert(window.ElementsToTheme, {btn, "BackgroundColor3", "ElementAlt", {hover = "Accent"}})
                Create("UICorner", {Parent = btn, CornerRadius = ConfigurableSettings.SmallCornerRadius})
                local oME, oML
                oME =
                    btn.MouseEnter:Connect(
                    function()
                        LibTweenService:Create(btn, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.Accent}):Play(

                        )
                    end
                )
                oML =
                    btn.MouseLeave:Connect(
                    function()
                        LibTweenService:Create(btn, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.ElementAlt}):Play(

                        )
                    end
                )
                if btnEl.TooltipEnabled and btnEl.TooltipText ~= "" then
                    if oME then
                        oME:Disconnect()
                    end
                    if oML then
                        oML:Disconnect()
                    end
                    AddConnection(
                        btn.MouseEnter:Connect(
                            function()
                                LibTweenService:Create(
                                    btn,
                                    TweenInfo.new(0.1),
                                    {BackgroundColor3 = Library.Theme.Accent}
                                ):Play()
                                Library:ShowTooltip(btnEl.TooltipText, btn)
                            end
                        )
                    )
                    AddConnection(
                        btn.MouseLeave:Connect(
                            function()
                                LibTweenService:Create(
                                    btn,
                                    TweenInfo.new(0.1),
                                    {BackgroundColor3 = Library.Theme.ElementAlt}
                                ):Play()
                                Library:HideTooltip()
                            end
                        )
                    )
                end
                btn.MouseButton1Click:Connect(
                    cfg.Callback or function()
                            warn("Button '" .. btnEl.Name .. "' no callback.")
                        end
                )
                return btn
            end


            function Library:AddKeybindToList(keybindName, keyTextOnly)
                if not self.KeyListItemsContainer then
                    warn("ohbeecity: KeyListItemsContainer is nil, cannot add keybind:", keybindName)
                    return nil
                end
            
                local itemNameClean = string.gsub(keybindName, " ⚠️", "")
                -- Check if item already exists to prevent duplicates if re-adding without proper removal
                if self.KeybindListItems[keybindName] and self.KeybindListItems[keybindName].Frame and self.KeybindListItems[keybindName].Frame.Parent then
                    warn("ohbeecity: Keybind list item for '" .. keybindName .. "' already exists. Removing old one.")
                    self.KeybindListItems[keybindName]:Remove()
                end
                
                local itemFrame = Create("Frame",{
                    Name="KeybindListItem_"..itemNameClean, 
                    Size=UDim2.new(1,0,0,ConfigurableSettings.KeybindListItemHeight), 
                    BackgroundColor3=self.Theme.Element, 
                    Parent=self.KeyListItemsContainer, 
                    AutomaticSize=Enum.AutomaticSize.X
                })
                -- Ensure itemFrame was created
                if not itemFrame then
                    warn("ohbeecity: Failed to create itemFrame for keybind:", keybindName)
                    return nil
                end
            
                Create("UICorner",{Parent=itemFrame,CornerRadius=ConfigurableSettings.SmallCornerRadius})
                local itemStroke = Create("UIStroke",{Parent=itemFrame,Color=self.Theme.Border,Thickness=1})
                
                local nameLabel = Create("TextLabel",{
                    Name="NameLabel",BackgroundTransparency=1,Text=keybindName,TextColor3=self.Theme.Text,
                    TextSize=ConfigurableSettings.KeybindListFontSize,Font=Enum.Font.Gotham,
                    TextXAlignment=Enum.TextXAlignment.Left,Parent=itemFrame,
                    Size=UDim2.new(0,0,1,0),AutomaticSize=Enum.AutomaticSize.X
                })
                local keyLabel = Create("TextLabel",{
                    Name="KeyLabel",BackgroundTransparency=1,Text="["..keyTextOnly.."]",TextColor3=self.Theme.TextDark,
                    TextSize=ConfigurableSettings.KeybindListFontSize,Font=Enum.Font.Gotham,
                    TextXAlignment=Enum.TextXAlignment.Right,Parent=itemFrame,
                    Size=UDim2.new(0,0,1,0),AutomaticSize=Enum.AutomaticSize.X
                })
                
                -- Ensure labels were created
                if not nameLabel or not keyLabel then
                    warn("ohbeecity: Failed to create labels for keybind item:", keybindName)
                    itemFrame:Destroy() -- Clean up
                    return nil
                end
            
                Create("UIListLayout",{Parent=itemFrame,FillDirection=Enum.FillDirection.Horizontal,VerticalAlignment=Enum.VerticalAlignment.Center,HorizontalAlignment=Enum.HorizontalAlignment.Left,Padding=UDim.new(0,5)})
                
                local entry = {
                    Frame=itemFrame, NameLabel=nameLabel, KeyLabel=keyLabel, Stroke=itemStroke,
                    SetKey=function(selfRef,newKeyText) 
                        selfRef.KeyLabel.Text="["..newKeyText.."]"
                        Library:UpdateKeyListWidth() 
                    end,
                    SetVisualState=function(selfRef,isActive)
                        if not selfRef.Frame or not selfRef.Frame.Parent then return end -- Safety check
                        if isActive then 
                            selfRef.Frame.BackgroundColor3=Library.Theme.ElementAlt
                            selfRef.Stroke.Color=Library.Theme.Accent
                            selfRef.KeyLabel.TextColor3=Library.Theme.Accent 
                        else 
                            selfRef.Frame.BackgroundColor3=Library.Theme.Element
                            selfRef.Stroke.Color=Library.Theme.Border
                            selfRef.KeyLabel.TextColor3=Library.Theme.TextDark 
                        end 
                    end,
                    Remove=function(selfRef)
                        if selfRef.Frame and selfRef.Frame.Parent then selfRef.Frame:Destroy() end 
                        Library.KeybindListItems[keybindName]=nil 
                        Library:UpdateKeyListWidth()
                    end
                }
                Library.KeybindListItems[keybindName]=entry 
                Library:UpdateKeyListWidth() 
                return entry
            end

            function section:Dropdown(cfg)
                local dd = {
                    Name = cfg.Name or "Dropdown",
                    Options = cfg.Options or {},
                    Multi = cfg.Multi or false,
                    Callback = cfg.Callback or function()
                        end,
                    Flag = cfg.Flag,
                    Open = false,
                    OptionButtons = {},
                    Risky = cfg.risky or false,
                    TooltipEnabled = cfg.tooltip or false,
                    TooltipText = cfg.tooltiptext or ""
                }
                if dd.Multi then
                    dd.Value = {}
                    if cfg.Default then
                        if type(cfg.Default) == "string" then
                            dd.Value[cfg.Default] = true
                        elseif type(cfg.Default) == "table" then
                            for _, oN in ipairs(cfg.Default) do
                                dd.Value[oN] = true
                            end
                        end
                    end
                else
                    dd.Value = cfg.Default or (cfg.Options and #cfg.Options > 0 and cfg.Options[1] or nil)
                end
                local hldr =
                    Create(
                    "Frame",
                    {
                        Size = UDim2.new(1, 0, 0, ConfigurableSettings.DropdownHolderHeight),
                        BackgroundTransparency = 1,
                        Parent = cntr,
                        ZIndex = Library.ZIndex + 20
                    }
                )
                dd.Holder = hldr
                local main =
                    Create(
                    "TextButton",
                    {
                        Name = "DropdownMain",
                        Size = UDim2.new(1, 0, 1, 0),
                        BackgroundColor3 = Library.Theme.ElementAlt,
                        Text = "",
                        Parent = hldr
                    }
                )
                table.insert(window.ElementsToTheme, {main, "BackgroundColor3", "ElementAlt"})
                Create("UICorner", {Parent = main, CornerRadius = ConfigurableSettings.SmallCornerRadius})
                local mS =
                    Create("UIStroke", {Parent = main, Color = Library.Theme.Border, Thickness = 1, Transparency = 0.5})
                table.insert(window.ElementsToTheme, {mS, "Color", "Border"})
                main.MouseEnter:Connect(
                    function()
                        if not dd.Open then
                            LibTweenService:Create(main, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.Element}):Play(

                            )
                        end
                    end
                )
                main.MouseLeave:Connect(
                    function()
                        if not dd.Open then
                            LibTweenService:Create(
                                main,
                                TweenInfo.new(0.1),
                                {BackgroundColor3 = Library.Theme.ElementAlt}
                            ):Play()
                        end
                    end
                )
                if dd.TooltipEnabled and dd.TooltipText ~= "" then
                    AddConnection(
                        main.MouseEnter:Connect(
                            function()
                                Library:ShowTooltip(dd.TooltipText, main)
                            end
                        )
                    )
                    AddConnection(
                        main.MouseLeave:Connect(
                            function()
                                Library:HideTooltip()
                            end
                        )
                    )
                end
                local function getDDDisplay()
                    if dd.Multi then
                        local sN = {}
                        for oN, iS in pairs(dd.Value) do
                            if iS then
                                table.insert(sN, oN)
                            end
                        end
                        table.sort(sN)
                        if #sN == 0 then
                            return "None"
                        end
                        local dS = table.concat(sN, ", ")
                        if #dS > 25 and #sN > 1 then
                            return #sN .. " selected"
                        end
                        return dS
                    else
                        return tostring(dd.Value)
                    end
                end
                local dspName = dd.Name
                if dd.Risky then
                    dspName = dspName .. " ⚠️"
                end
                local lbl =
                    Create(
                    "TextLabel",
                    {
                        Size = UDim2.new(1, -30, 1, 0),
                        Position = UDim2.new(0, 10, 0, 0),
                        BackgroundTransparency = 1,
                        Text = dspName .. ": " .. getDDDisplay(),
                        TextColor3 = dd.Risky and (Library.Theme.TextRisky or ConfigurableSettings.RiskyColor) or
                            Library.Theme.Text,
                        TextSize = ConfigurableSettings.DefaultFontSize,
                        Font = Enum.Font.Gotham,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = main
                    }
                )
                if not dd.Risky then
                    table.insert(window.ElementsToTheme, {lbl, "TextColor3", "Text"})
                end
                local arr =
                    Create(
                    "TextLabel",
                    {
                        Size = UDim2.new(0, 20, 1, 0),
                        Position = UDim2.new(1, -25, 0, 0),
                        BackgroundTransparency = 1,
                        Text = "▼",
                        TextColor3 = Library.Theme.TextDark,
                        TextSize = ConfigurableSettings.SmallFontSize,
                        Font = Enum.Font.Gotham,
                        Parent = main
                    }
                )
                table.insert(window.ElementsToTheme, {arr, "TextColor3", "TextDark"})
                local list =
                    Create(
                    "Frame",
                    {
                        Name = "DropdownList",
                        Size = UDim2.new(1, 0, 0, 0),
                        Position = UDim2.new(0, 0, 1, 5),
                        BackgroundColor3 = Library.Theme.Background,
                        BorderSizePixel = 0,
                        ClipsDescendants = true,
                        Parent = hldr
                    }
                )
                table.insert(window.ElementsToTheme, {list, "BackgroundColor3", "Background"})
                Create("UICorner", {Parent = list, CornerRadius = ConfigurableSettings.SmallCornerRadius})
                Create(
                    "UIListLayout",
                    {Parent = list, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 2)}
                )
                for i, oNS in ipairs(dd.Options) do
                    local oN = tostring(oNS)
                    local oB =
                        Create(
                        "TextButton",
                        {
                            Size = UDim2.new(1, 0, 0, ConfigurableSettings.ElementHeight),
                            Text = oN,
                            TextSize = ConfigurableSettings.SmallFontSize,
                            Font = Enum.Font.Gotham,
                            Parent = list
                        }
                    )
                    oB.Name = "Option_" .. oN
                    table.insert(dd.OptionButtons, oB)
                    local function updVis(b, iS)
                        b.BackgroundColor3 = iS and Library.Theme.Accent or Library.Theme.Element
                        b.TextColor3 = iS and Library.Theme.TextOnAccent or Library.Theme.Text
                    end
                    oB.Selected = dd.Multi and (dd.Value[oN] == true) or (not dd.Multi and dd.Value == oN)
                    updVis(oB, oB.Selected)
                    oB.MouseEnter:Connect(
                        function()
                            if not oB.Selected then
                                LibTweenService:Create(
                                    oB,
                                    TweenInfo.new(0.1),
                                    {BackgroundColor3 = Library.Theme.ElementAlt}
                                ):Play()
                            end
                        end
                    )
                    oB.MouseLeave:Connect(
                        function()
                            if not oB.Selected then
                                LibTweenService:Create(
                                    oB,
                                    TweenInfo.new(0.1),
                                    {BackgroundColor3 = Library.Theme.Element}
                                ):Play()
                            end
                        end
                    )
                    oB.MouseButton1Click:Connect(
                        function()
                            if dd.Multi then
                                oB.Selected = not oB.Selected
                                dd.Value[oN] = oB.Selected
                                if not oB.Selected then
                                    dd.Value[oN] = nil
                                end
                                updVis(oB, oB.Selected)
                                lbl.Text = dspName .. ": " .. getDDDisplay()
                                local cS = {}
                                for opt, sel in pairs(dd.Value) do
                                    if sel then
                                        table.insert(cS, opt)
                                    end
                                end
                                table.sort(cS)
                                if dd.Flag then
                                    Library.Flags[dd.Flag] = cS
                                end
                                dd.Callback(cS)
                                if dd.Open then
                                    main.BackgroundColor3 = Library.Theme.Element
                                    LibTweenService:Create(mS, TweenInfo.new(0.15), {Color = Library.Theme.Accent}):Play(

                                    )
                                else
                                    main.BackgroundColor3 = Library.Theme.ElementAlt
                                    LibTweenService:Create(mS, TweenInfo.new(0.15), {Color = Library.Theme.Border}):Play(

                                    )
                                end
                            else
                                dd.Value = oN
                                lbl.Text = dspName .. ": " .. getDDDisplay()
                                for _, oBtn in ipairs(dd.OptionButtons) do
                                    oBtn.Selected = (oBtn == oB)
                                    updVis(oBtn, oBtn.Selected)
                                end
                                if dd.Flag then
                                    Library.Flags[dd.Flag] = oN
                                end
                                dd.Callback(oN)
                                dd.Open = false
                                hldr.ZIndex = Library.ZIndex + 20
                                LibTweenService:Create(list, TweenInfo.new(0.15), {Size = UDim2.new(1, 0, 0, 0)}):Play()
                                arr.Text = "▼"
                                main.BackgroundColor3 = Library.Theme.ElementAlt
                                LibTweenService:Create(mS, TweenInfo.new(0.15), {Color = Library.Theme.Border}):Play()
                            end
                        end
                    )
                end
                table.insert(Library.AllDropdowns, dd)
                if dd.Flag then
                    Library.Options[dd.Flag] = dd
                end
                main.MouseButton1Click:Connect(
                    function()
                        dd.Open = not dd.Open
                        if dd.Open then
                            hldr.ZIndex = Library.ZIndex + 1000
                            list.ZIndex = Library.ZIndex + 1001
                            section.Frame.ZIndex = Library.ZIndex + 999
                            main.BackgroundColor3 = Library.Theme.Element
                            LibTweenService:Create(mS, TweenInfo.new(0.15), {Color = Library.Theme.Accent}):Play()
                            for _, otherDd in ipairs(Library.AllDropdowns) do
                                if otherDd ~= dd and otherDd.Open then
                                    otherDd.Open = false
                                    otherDd.Holder.ZIndex = Library.ZIndex + 20
                                    local otherList = otherDd.Holder:FindFirstChild("DropdownList")
                                    if otherList then
                                        LibTweenService:Create(
                                            otherList,
                                            TweenInfo.new(0.15),
                                            {Size = UDim2.new(1, 0, 0, 0)}
                                        ):Play()
                                    end
                                    local otherMain = otherDd.Holder:FindFirstChild("DropdownMain")
                                    if otherMain then
                                        local otherArr = otherMain:FindFirstChildWhichIsA("TextLabel", true)
                                        if otherArr and (otherArr.Text == "▲" or otherArr.Text == "▼") then
                                            otherArr.Text = "▼"
                                        end
                                        otherMain.BackgroundColor3 = Library.Theme.ElementAlt
                                        local otherMs = otherMain:FindFirstChildOfClass("UIStroke")
                                        if otherMs then
                                            LibTweenService:Create(
                                                otherMs,
                                                TweenInfo.new(0.15),
                                                {Color = Library.Theme.Border}
                                            ):Play()
                                        end
                                    end
                                end
                            end
                        else
                            hldr.ZIndex = Library.ZIndex + 20
                            list.ZIndex = Library.ZIndex + 21
                            section.Frame.ZIndex = Library.ZIndex
                            main.BackgroundColor3 = Library.Theme.ElementAlt
                            LibTweenService:Create(mS, TweenInfo.new(0.15), {Color = Library.Theme.Border}):Play()
                        end
                        local listHeight = #dd.Options * (ConfigurableSettings.ElementHeight + 2)
                        LibTweenService:Create(
                            list,
                            TweenInfo.new(0.15),
                            {Size = dd.Open and UDim2.new(1, 0, 0, listHeight) or UDim2.new(1, 0, 0, 0)}
                        ):Play()
                        arr.Text = dd.Open and "▲" or "▼"
                    end
                )
                if dd.Flag and Library.Flags[dd.Flag] then
                    local flagVal = Library.Flags[dd.Flag]
                    if dd.Multi then
                        if type(flagVal) == "table" then
                            for k in pairs(dd.Value) do
                                dd.Value[k] = nil
                            end
                            for _, vN in ipairs(flagVal) do
                                dd.Value[vN] = true
                            end
                        end
                    else
                        dd.Value = flagVal
                    end
                    lbl.Text = dspName .. ": " .. getDDDisplay()
                    for _, oB in ipairs(dd.OptionButtons) do
                        oB.Selected = dd.Multi and (dd.Value[oB.Text] == true) or (not dd.Multi and dd.Value == oB.Text)
                        local iS = oB.Selected
                        oB.BackgroundColor3 = iS and Library.Theme.Accent or Library.Theme.Element
                        oB.TextColor3 = iS and Library.Theme.TextOnAccent or Library.Theme.Text
                    end
                end
                return dd
            end


-- ... (Previous parts of Library setup) ...

function Library:UpdateKeyListWidth()
    if not self.KeyListFrame or not self.KeyListItemsContainer or not self.KeyList then return end
    local maxWidth = ConfigurableSettings.KeybindListWidth 
    local totalHorizontalPaddingInItem = 10 
    
    if #self.KeyListItemsContainer:GetChildren() > 1 then 
        for _, itemEntry in pairs(self.KeybindListItems) do
            if itemEntry.Frame and itemEntry.Frame.Parent and itemEntry.NameLabel and itemEntry.KeyLabel then
                local nameSize = LibTextService:GetTextSize(itemEntry.NameLabel.Text, itemEntry.NameLabel.TextSize, itemEntry.NameLabel.Font, Vector2.new(math.huge, itemEntry.NameLabel.AbsoluteSize.Y))
                local keySize = LibTextService:GetTextSize(itemEntry.KeyLabel.Text, itemEntry.KeyLabel.TextSize, itemEntry.KeyLabel.Font, Vector2.new(math.huge, itemEntry.KeyLabel.AbsoluteSize.Y))
                local requiredItemWidth = nameSize.X + keySize.X + totalHorizontalPaddingInItem
                maxWidth = math.max(maxWidth, requiredItemWidth)
            end
        end
    end
    local newFrameWidth = math.floor(maxWidth + ConfigurableSettings.KeybindPadding * 2) 
    if self.KeyListFrame.AbsoluteSize.X ~= newFrameWidth then
         self.KeyListFrame.Size = UDim2.new(0, newFrameWidth, 0, self.KeyListFrame.Size.Y.Offset)
    end
    local contentFrame = self.KeyListFrame:FindFirstChild("Content")
    if contentFrame then contentFrame.Size = UDim2.new(1,0, contentFrame.Size.Y.Scale, contentFrame.Size.Y.Offset) end
    if self.KeyListItemsContainer and self.KeyListItemsContainer.UIListLayout then
        self.KeyListItemsContainer.CanvasSize = UDim2.new(0, self.KeyListItemsContainer.UIListLayout.AbsoluteContentSize.X, 0, self.KeyListItemsContainer.UIListLayout.AbsoluteContentSize.Y)
    end
end

function Library:CreateKeyList()
    self.KeyListFrame = Create("Frame", {
        Name = "KeyListFrame", 
        Size = UDim2.new(0, ConfigurableSettings.KeybindListWidth, 0, ConfigurableSettings.KeybindListTitleHeight + ConfigurableSettings.KeybindPadding), 
        Position = UDim2.new(0, 10, 0, (self.Watermark and self.Watermark.AbsoluteSize.Y or 0) + 40), 
        BackgroundColor3 = self.Theme.BackgroundAlt, 
        BorderSizePixel = 0, 
        Parent = UIScreenGui, 
        ZIndex = Library.ZIndex + 90
    })
    
    Create("UICorner", {Parent = self.KeyListFrame, CornerRadius = ConfigurableSettings.CornerRadius})
    Create("UIStroke", {
        Name = "MainStroke", 
        Parent = self.KeyListFrame, 
        Color = self.Theme.Border, 
        Thickness = 1, 
        Transparency = 0.3
    })
    
    -- Enhanced shadow effect
    Create("ImageLabel", {
        Name = "Shadow",
        Size = UDim2.new(1, 10, 1, 10),
        Position = UDim2.new(0.5, 0, 0.5, 1),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Image = "rbxassetid://1316045217",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.85,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(10, 10, 118, 118),
        Parent = self.KeyListFrame,
        ZIndex = self.KeyListFrame.ZIndex - 1
    })
    
    -- Modern title bar with gradient
    local tB = Create("Frame", {
        Name = "TitleBar", 
        Size = UDim2.new(1, 0, 0, ConfigurableSettings.KeybindListTitleHeight), 
        BackgroundColor3 = self.Theme.Element,
        BorderSizePixel = 0,
        Parent = self.KeyListFrame
    })
    
    Create("UICorner", {Parent = tB, CornerRadius = ConfigurableSettings.CornerRadius})
    Create("Frame", {
        Name = "TitleFix",
        Size = UDim2.new(1, 0, 0, ConfigurableSettings.CornerRadius.Offset),
        Position = UDim2.new(0, 0, 1, -ConfigurableSettings.CornerRadius.Offset),
        BackgroundColor3 = self.Theme.Element,
        BorderSizePixel = 0,
        Parent = tB
    })
    
    -- Add subtle gradient to title bar
    Create("UIGradient", {
        Parent = tB,
        Rotation = 90,
        Transparency = NumberSequence.new{
            NumberSequenceKeypoint.new(0, 0),
            NumberSequenceKeypoint.new(1, 0.1)
        }
    })
    
    -- Accent line under title
    local accentLine = Create("Frame", {
        Size = UDim2.new(0.8, 0, 0, 1),
        Position = UDim2.new(0.1, 0, 1, 0),
        BackgroundColor3 = self.Theme.Accent,
        BorderSizePixel = 0,
        Parent = tB
    })
    
    Create("UIGradient", {
        Parent = accentLine,
        Transparency = NumberSequence.new{
            NumberSequenceKeypoint.new(0, 0.7),
            NumberSequenceKeypoint.new(0.5, 0),
            NumberSequenceKeypoint.new(1, 0.7)
        }
    })
    
    -- Enhanced title text with icon
    Create("TextLabel", {
        Name = "TitleText",
        Size = UDim2.new(1, -20, 1, 0),
        Position = UDim2.new(0, 15, 0, 0),
        BackgroundTransparency = 1,
        Text = "⌨️ Keybinds",
        TextColor3 = self.Theme.Accent,
        TextSize = ConfigurableSettings.TitleFontSize,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = tB
    })
    
    -- Modern content area
    local cont = Create("Frame", {
        Name = "Content",
        Size = UDim2.new(1, 0, 1, -(ConfigurableSettings.KeybindListTitleHeight + ConfigurableSettings.KeybindPadding/2)),
        Position = UDim2.new(0, 0, 0, ConfigurableSettings.KeybindListTitleHeight),
        BackgroundColor3 = self.Theme.BackgroundAlt,
        BorderSizePixel = 0,
        ClipsDescendants = true,
        Parent = self.KeyListFrame
    })
    
    Create("UICorner", {Parent = cont, CornerRadius = ConfigurableSettings.CornerRadius})
    Create("Frame", {
        Name = "ContentFix",
        Size = UDim2.new(1, 0, 0, ConfigurableSettings.CornerRadius.Offset),
        Position = UDim2.new(0, 0, 0, -ConfigurableSettings.CornerRadius.Offset),
        BackgroundColor3 = self.Theme.BackgroundAlt,
        BorderSizePixel = 0,
        Parent = cont
    })
    
    -- Enhanced scrolling frame
    self.KeyListItemsContainer = Create("ScrollingFrame", {
        Name = "KeyListItemsContainer",
        Size = UDim2.new(1, -ConfigurableSettings.KeybindPadding, 1, -ConfigurableSettings.KeybindPadding),
        Position = UDim2.new(0, ConfigurableSettings.KeybindPadding/2, 0, ConfigurableSettings.KeybindPadding/2),
        BackgroundTransparency = 1,
        Parent = cont,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = Library.Theme.Accent,
        AutomaticSize = Enum.AutomaticSize.Y,
        ScrollingDirection = Enum.ScrollingDirection.Y
    })
    
    self.KeyList = Create("UIListLayout", {
        Parent = self.KeyListItemsContainer,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 4),
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Left
    })
    
    AddConnection(self.KeyList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        local nH = self.KeyList.AbsoluteContentSize.Y 
        local tH = ConfigurableSettings.KeybindListTitleHeight 
        local totP = ConfigurableSettings.KeybindPadding * 1.5 
        self.KeyListItemsContainer.CanvasSize = UDim2.new(0, self.KeyListItemsContainer.AbsoluteSize.X - 5, 0, nH)
        self.KeyListFrame.Size = UDim2.new(0, self.KeyListFrame.Size.X.Offset, 0, tH + nH + totP)
        cont.Size = UDim2.new(1, 0, 0, nH + ConfigurableSettings.KeybindPadding)
        Library:UpdateKeyListWidth()
    end))
    
    MakeDraggable(self.KeyListFrame, tB) 
    Library:UpdateKeyListWidth()
end


function Library:AddKeybindToList(keybindName, keyTextOnly)
    if not self.KeyListItemsContainer then
        warn("ohbeecity: KeyListItemsContainer is nil, cannot add keybind:", keybindName)
        return nil
    end
    
    local itemNameClean = string.gsub(keybindName, " ⚠️", "")
    if self.KeybindListItems[keybindName] and self.KeybindListItems[keybindName].Frame and self.KeybindListItems[keybindName].Frame.Parent then
        self.KeybindListItems[keybindName]:Remove()
    end
    
    -- Enhanced keybind item with modern styling
    local itemFrame = Create("Frame", {
        Name = "KeybindListItem_" .. itemNameClean, 
        Size = UDim2.new(1, 0, 0, ConfigurableSettings.KeybindListItemHeight + 2), 
        BackgroundColor3 = self.Theme.Element, 
        Parent = self.KeyListItemsContainer, 
        AutomaticSize = Enum.AutomaticSize.X
    })
    
    if not itemFrame then return nil end
    
    Create("UICorner", {Parent = itemFrame, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    local itemStroke = Create("UIStroke", {
        Parent = itemFrame, 
        Color = self.Theme.Border, 
        Thickness = 1, 
        Transparency = 0.5
    })
    
    -- Add subtle hover effect background
    local hoverBg = Create("Frame", {
        Name = "HoverBackground",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = self.Theme.ElementAlt,
        BackgroundTransparency = 1,
        Parent = itemFrame,
        ZIndex = itemFrame.ZIndex - 1
    })
    Create("UICorner", {Parent = hoverBg, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    
    -- Container for proper padding and layout
    local contentContainer = Create("Frame", {
        Name = "ContentContainer",
        Size = UDim2.new(1, -12, 1, -4),
        Position = UDim2.new(0, 6, 0, 2),
        BackgroundTransparency = 1,
        Parent = itemFrame
    })
    
    local nameLabel = Create("TextLabel", {
        Name = "NameLabel",
        BackgroundTransparency = 1,
        Text = keybindName,
        TextColor3 = self.Theme.Text,
        TextSize = ConfigurableSettings.KeybindListFontSize,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = contentContainer,
        Size = UDim2.new(0, 0, 1, 0),
        AutomaticSize = Enum.AutomaticSize.X
    })
    
    -- Enhanced key display with background
    local keyBg = Create("Frame", {
        Name = "KeyBackground",
        Size = UDim2.new(0, 0, 0.7, 0),
        Position = UDim2.new(1, 0, 0.15, 0),
        AnchorPoint = Vector2.new(1, 0),
        BackgroundColor3 = self.Theme.ElementAlt,
        Parent = contentContainer,
        AutomaticSize = Enum.AutomaticSize.X
    })
    Create("UICorner", {Parent = keyBg, CornerRadius = UDim.new(0, 3)})
    
    local keyLabel = Create("TextLabel", {
        Name = "KeyLabel",
        BackgroundTransparency = 1,
        Text = keyTextOnly,
        TextColor3 = self.Theme.TextDark,
        TextSize = ConfigurableSettings.KeybindListFontSize - 1,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Center,
        Parent = keyBg,
        Size = UDim2.new(0, 0, 1, 0),
        AutomaticSize = Enum.AutomaticSize.X
    })
    
    -- Add padding to key background
    Create("UIPadding", {
        Parent = keyBg,
        PaddingLeft = UDim.new(0, 4),
        PaddingRight = UDim.new(0, 4),
        PaddingTop = UDim.new(0, 1),
        PaddingBottom = UDim.new(0, 1)
    })
    
    if not nameLabel or not keyLabel then 
        itemFrame:Destroy()
        return nil 
    end
    
    -- Add subtle hover effects
    local hoverConnection1, hoverConnection2
    hoverConnection1 = itemFrame.MouseEnter:Connect(function()
        LibTweenService:Create(hoverBg, TweenInfo.new(0.2), {BackgroundTransparency = 0.7}):Play()
        LibTweenService:Create(itemStroke, TweenInfo.new(0.2), {Transparency = 0.2}):Play()
    end)
    
    hoverConnection2 = itemFrame.MouseLeave:Connect(function()
        LibTweenService:Create(hoverBg, TweenInfo.new(0.2), {BackgroundTransparency = 1}):Play()
        LibTweenService:Create(itemStroke, TweenInfo.new(0.2), {Transparency = 0.5}):Play()
    end)
    
    local entry = {
        Frame = itemFrame, 
        NameLabel = nameLabel, 
        KeyLabel = keyLabel, 
        KeyBackground = keyBg,
        Stroke = itemStroke,
        HoverConnections = {hoverConnection1, hoverConnection2},
        
        SetKey = function(s, nK)
            s.KeyLabel.Text = nK
            Library:UpdateKeyListWidth()
        end,
        
        SetVisualState = function(s, isActive)
            if not s.Frame or not s.Frame.Parent then return end
            
            if isActive then 
                s.Frame.BackgroundColor3 = Library.Theme.ElementAlt
                s.Stroke.Color = Library.Theme.Accent
                s.Stroke.Transparency = 0
                s.KeyLabel.TextColor3 = Library.Theme.Accent
                s.KeyBackground.BackgroundColor3 = Library.Theme.Accent
                LibTweenService:Create(s.KeyLabel, TweenInfo.new(0.2), {TextColor3 = Library.Theme.TextOnAccent}):Play()
            else 
                s.Frame.BackgroundColor3 = Library.Theme.Element
                s.Stroke.Color = Library.Theme.Border
                s.Stroke.Transparency = 0.5
                s.KeyLabel.TextColor3 = Library.Theme.TextDark
                s.KeyBackground.BackgroundColor3 = Library.Theme.ElementAlt
            end 
        end,
        
        Remove = function(s)
            if s.HoverConnections then
                for _, conn in ipairs(s.HoverConnections) do
                    if conn then conn:Disconnect() end
                end
            end
            if s.Frame and s.Frame.Parent then 
                s.Frame:Destroy() 
            end 
            Library.KeybindListItems[keybindName] = nil 
            Library:UpdateKeyListWidth()
        end
    }
    
    Library.KeybindListItems[keybindName] = entry 
    Library:UpdateKeyListWidth() 
    return entry
end

function Library:Unload() -- Must be Library:MethodName
    for _,c in ipairs(self.Connections)do if c and typeof(c)=="RBXScriptConnection"then c:Disconnect()end end self.Connections={}if UIScreenGui and UIScreenGui.Parent then UIScreenGui:Destroy()end if self.ActiveColorPickerModalOverlay and self.ActiveColorPickerModalOverlay.Parent then self.ActiveColorPickerModalOverlay:Destroy()end if Library.ActiveKeybindMenu and Library.ActiveKeybindMenu.Parent then Library.ActiveKeybindMenu:Destroy()Library.ActiveKeybindMenu=nil end self.Windows={}self.Flags={}self.Options={}self.ActiveColorPicker=nil self.Watermark=nil self.KeyListFrame=nil self.KeyList=nil self.KeyListItemsContainer=nil self.KeybindListItems={}if self.GlobalEffectConnection then self.GlobalEffectConnection:Disconnect()self.GlobalEffectConnection=nil self.ActiveEffectElements={}end print("ohbeecity UI Library unloaded.")
end

-- ... (rest of Part 1, including _CreateNewColorPickerUI, etc.)

            function section:Textbox(cfg)
                local txtBx = {
                    Name = cfg.Name or "Textbox",
                    Value = cfg.Default or "",
                    Placeholder = cfg.Placeholder or "Enter text...",
                    Callback = cfg.Callback or function()
                        end,
                    Flag = cfg.Flag,
                    Risky = cfg.risky or false,
                    TooltipEnabled = cfg.tooltip or false,
                    TooltipText = cfg.tooltiptext or ""
                }
                local hldr =
                    Create(
                    "Frame",
                    {
                        Size = UDim2.new(1, 0, 0, ConfigurableSettings.TextboxHolderHeight),
                        BackgroundTransparency = 1,
                        Parent = cntr
                    }
                )
                if txtBx.TooltipEnabled and txtBx.TooltipText ~= "" then
                    AddConnection(
                        hldr.MouseEnter:Connect(
                            function()
                                Library:ShowTooltip(txtBx.TooltipText, hldr)
                            end
                        )
                    )
                    AddConnection(
                        hldr.MouseLeave:Connect(
                            function()
                                Library:HideTooltip()
                            end
                        )
                    )
                end
                local dspName = txtBx.Name
                if txtBx.Risky then
                    dspName = dspName .. " ⚠️"
                end
                local lbl =
                    Create(
                    "TextLabel",
                    {
                        Size = UDim2.new(1, 0, 0, 15),
                        BackgroundTransparency = 1,
                        Text = dspName,
                        TextColor3 = txtBx.Risky and (Library.Theme.TextRisky or ConfigurableSettings.RiskyColor) or
                            Library.Theme.Text,
                        TextSize = ConfigurableSettings.DefaultFontSize,
                        Font = Enum.Font.Gotham,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = hldr
                    }
                )
                if not txtBx.Risky then
                    table.insert(window.ElementsToTheme, {lbl, "TextColor3", "Text"})
                end
                local inp =
                    Create(
                    "TextBox",
                    {
                        Size = UDim2.new(1, 0, 0, ConfigurableSettings.ButtonHeight),
                        Position = UDim2.new(0, 0, 0, 18),
                        BackgroundColor3 = Library.Theme.ElementAlt,
                        Text = cfg.Default or "",
                        PlaceholderText = cfg.Placeholder or "Enter text...",
                        TextColor3 = Library.Theme.Text,
                        PlaceholderColor3 = Library.Theme.TextDark,
                        TextSize = ConfigurableSettings.SmallFontSize,
                        Font = Enum.Font.Gotham,
                        ClearTextOnFocus = false,
                        Parent = hldr
                    }
                )
                txtBx.InputControl = inp
                table.insert(window.ElementsToTheme, {inp, "BackgroundColor3", "ElementAlt"})
                table.insert(window.ElementsToTheme, {inp, "TextColor3", "Text"})
                table.insert(window.ElementsToTheme, {inp, "PlaceholderColor3", "TextDark"})
                Create("UICorner", {Parent = inp, CornerRadius = ConfigurableSettings.SmallCornerRadius})
                local iS =
                    Create("UIStroke", {Parent = inp, Color = Library.Theme.Border, Thickness = 1, Transparency = 0.5})
                table.insert(window.ElementsToTheme, {iS, "Color", "Border"})
                inp.FocusLost:Connect(
                    function(eP)
                        txtBx.Value = inp.Text
                        if txtBx.Flag then
                            Library.Flags[txtBx.Flag] = inp.Text
                        end
                        if eP then
                            txtBx.Callback(inp.Text)
                        end
                    end
                )
                inp.Changed:Connect(
                    function(prop)
                        if prop == "Text" then
                            txtBx.Value = inp.Text
                            if txtBx.Flag then
                                Library.Flags[txtBx.Flag] = inp.Text
                            end
                        end
                    end
                )
                if txtBx.Flag then
                    Library.Options[txtBx.Flag] = txtBx
                    if Library.Flags[txtBx.Flag] ~= nil then
                        inp.Text = Library.Flags[txtBx.Flag]
                        txtBx.Value = inp.Text
                    end
                end
                return txtBx
            end
 -- Replace the existing Keybind function in your section with this:
-- Replace the entire Keybind function with this corrected version:
function section:Keybind(cfg)
    local kb = {
        Name = cfg.Name or "Keybind",
        Value = typeof(cfg.Default) == "EnumItem" and cfg.Default or
            (type(cfg.Default) == "string" and cfg.Default or Enum.KeyCode.Unknown),
        Mode = cfg.DefaultMode or "Hold",
        Callback = cfg.Callback or function() end,
        Flag = cfg.Flag,
        Binding = false,
        ListItem = nil,
        Risky = cfg.risky or false,
        TooltipEnabled = cfg.tooltip or false,
        TooltipText = cfg.tooltiptext or "",
        Active = false,
        HolderFrame = nil,
        ButtonControl = nil,
        ModeMenu = nil
    }
    
    kb.HolderFrame = Create("Frame", {
        Size = UDim2.new(1, 0, 0, ConfigurableSettings.ElementHeight),
        BackgroundTransparency = 1,
        Parent = cntr
    })
    
    if kb.TooltipEnabled and kb.TooltipText ~= "" then
        AddConnection(kb.HolderFrame.MouseEnter:Connect(function()
            Library:ShowTooltip(kb.TooltipText, kb.HolderFrame)
        end))
        AddConnection(kb.HolderFrame.MouseLeave:Connect(function()
            Library:HideTooltip()
        end))
    end
    
    local dspName = kb.Name
    if kb.Risky then
        dspName = dspName .. " ⚠️"
    end
    
    local lbl = Create("TextLabel", {
        Size = UDim2.new(0.7, -5, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Text = dspName,
        TextColor3 = kb.Risky and (Library.Theme.TextRisky or ConfigurableSettings.RiskyColor) or Library.Theme.Text,
        TextSize = ConfigurableSettings.DefaultFontSize,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = kb.HolderFrame
    })
    
    if not kb.Risky then
        table.insert(window.ElementsToTheme, {lbl, "TextColor3", "Text"})
    end
    
    -- Fixed button text function - removes the mode letters
    local function getKeybindButtonText()
        local keyName = typeof(kb.Value) == "string" and kb.Value or kb.Value.Name
        return keyName
    end
    
    kb.ButtonControl = Create("TextButton", {
        Size = UDim2.new(0.3, -5, 1, 0),
        Position = UDim2.new(0.7, 5, 0, 0),
        BackgroundColor3 = Library.Theme.ElementAlt,
        Text = getKeybindButtonText(),
        TextColor3 = Library.Theme.Text,
        TextSize = ConfigurableSettings.SmallFontSize,
        Font = Enum.Font.Gotham,
        Parent = kb.HolderFrame
    })
    
    table.insert(window.ElementsToTheme, {kb.ButtonControl, "BackgroundColor3", "ElementAlt", {binding = "Accent"}})
    table.insert(window.ElementsToTheme, {kb.ButtonControl, "TextColor3", "Text", {binding = "TextOnAccent"}})
    Create("UICorner", {Parent = kb.ButtonControl, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    
    local function updateKeyListVisualState()
        if kb.ListItem then
            kb.ListItem:SetVisualState(kb.Active)
        end
    end
    
    local function closeActiveKeybindMenu()
        if Library.ActiveKeybindMenu and Library.ActiveKeybindMenu.Parent then
            Library.ActiveKeybindMenu:Destroy()
            Library.ActiveKeybindMenu = nil
        end
        if kb.ModeMenu and kb.ModeMenu.Parent then
            kb.ModeMenu:Destroy()
            kb.ModeMenu = nil
        end
    end
    
    local function createModeMenu()
        closeActiveKeybindMenu()
        
        print("ohbeecity: Creating keybind mode menu for", kb.Name) -- Debug print
        
        -- Create menu with high Z-index and proper parent
        kb.ModeMenu = Create("Frame", {
            Name = "KeybindModeMenu",
            Size = UDim2.new(0, 85, 0, 80),
            Position = UDim2.new(1, 5, 0, 0),
            BackgroundColor3 = Library.Theme.Background,
            BorderSizePixel = 0,
            Parent = kb.ButtonControl,
            ZIndex = Library.ZIndex + 10000, -- Very high Z-index
            Visible = true
        })
        
        Library.ActiveKeybindMenu = kb.ModeMenu
        table.insert(window.ElementsToTheme, {kb.ModeMenu, "BackgroundColor3", "Background"})
        
        Create("UICorner", {Parent = kb.ModeMenu, CornerRadius = ConfigurableSettings.SmallCornerRadius})
        local mS = Create("UIStroke", {
            Parent = kb.ModeMenu, 
            Color = Library.Theme.Border, 
            Thickness = 1,
            Transparency = 0.3
        })
        table.insert(window.ElementsToTheme, {mS, "Color", "Border"})
        
        -- Add shadow
        Create("ImageLabel", {
            Name = "Shadow",
            Size = UDim2.new(1, 6, 1, 6),
            Position = UDim2.new(0.5, 0, 0.5, 1),
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundTransparency = 1,
            Image = "rbxassetid://1316045217",
            ImageColor3 = Color3.fromRGB(0, 0, 0),
            ImageTransparency = 0.8,
            ScaleType = Enum.ScaleType.Slice,
            SliceCenter = Rect.new(10, 10, 118, 118),
            Parent = kb.ModeMenu,
            ZIndex = kb.ModeMenu.ZIndex - 1
        })
        
        Create("UIListLayout", {
            Parent = kb.ModeMenu, 
            Padding = UDim.new(0, 3), 
            SortOrder = Enum.SortOrder.LayoutOrder,
            FillDirection = Enum.FillDirection.Vertical
        })
        
        -- Add padding
        Create("UIPadding", {
            Parent = kb.ModeMenu,
            PaddingTop = UDim.new(0, 4),
            PaddingBottom = UDim.new(0, 4),
            PaddingLeft = UDim.new(0, 4),
            PaddingRight = UDim.new(0, 4)
        })
        
        local modes = {"Hold", "Toggle", "Always"}
        for i, mN in ipairs(modes) do
            local mB = Create("TextButton", {
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundColor3 = kb.Mode == mN and Library.Theme.Accent or Library.Theme.Element,
                Text = mN,
                TextColor3 = kb.Mode == mN and Library.Theme.TextOnAccent or Library.Theme.Text,
                TextSize = ConfigurableSettings.SmallFontSize,
                Font = Enum.Font.Gotham,
                Parent = kb.ModeMenu,
                LayoutOrder = i,
                ZIndex = kb.ModeMenu.ZIndex + 1
            })
            
            Create("UICorner", {Parent = mB, CornerRadius = ConfigurableSettings.SmallCornerRadius})
            
            mB.MouseEnter:Connect(function()
                if kb.Mode ~= mN then
                    LibTweenService:Create(mB, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.ElementAlt}):Play()
                end
            end)
            
            mB.MouseLeave:Connect(function()
                if kb.Mode ~= mN then
                    LibTweenService:Create(mB, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.Element}):Play()
                end
            end)
            
            mB.MouseButton1Click:Connect(function()
                print("ohbeecity: Mode selected:", mN) -- Debug print
                kb.Mode = mN
                kb.ButtonControl.Text = getKeybindButtonText()
                
                if kb.Flag then
                    Library.Flags[kb.Flag .. "_mode"] = kb.Mode
                end
                if kb.ListItem then
                    kb.ListItem:SetKey(typeof(kb.Value) == "string" and kb.Value or kb.Value.Name)
                end
                
                if kb.Mode == "Always" then
                    if not kb.Active then
                        kb.Active = true
                        kb.Callback(true)
                    end
                elseif kb.Active then
                    kb.Active = false
                    kb.Callback(false)
                end
                
                updateKeyListVisualState()
                closeActiveKeybindMenu()
            end)
        end
        
        print("ohbeecity: Mode menu created successfully") -- Debug print
    end
    
    -- Left click for binding
    kb.ButtonControl.MouseButton1Click:Connect(function()
        print("ohbeecity: Left click - starting keybind binding") -- Debug print
        closeActiveKeybindMenu()
        kb.Binding = true
        kb.ButtonControl.Text = "..."
        kb.ButtonControl.BackgroundColor3 = Library.Theme.Accent
        kb.ButtonControl.TextColor3 = Library.Theme.TextOnAccent
    end)
    
    -- Right click for mode menu - Enhanced detection
    kb.ButtonControl.MouseButton2Click:Connect(function()
        print("ohbeecity: Right click detected on keybind button:", kb.Name) -- Debug print
        createModeMenu()
    end)
    
    -- Alternative right-click detection using InputBegan
    kb.ButtonControl.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            print("ohbeecity: Alternative right click detected") -- Debug print
            createModeMenu()
        end
    end)
    
    -- Global click detection to close menu
    AddConnection(LibUserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            if kb.ModeMenu and kb.ModeMenu.Parent then
                local mouseLocation = LibUserInputService:GetMouseLocation()
                
                -- Simple position-based detection
                local menuPos = kb.ModeMenu.AbsolutePosition
                local menuSize = kb.ModeMenu.AbsoluteSize
                local buttonPos = kb.ButtonControl.AbsolutePosition
                local buttonSize = kb.ButtonControl.AbsoluteSize
                
                local clickedOnMenu = mouseLocation.X >= menuPos.X and 
                                    mouseLocation.X <= menuPos.X + menuSize.X and
                                    mouseLocation.Y >= menuPos.Y and 
                                    mouseLocation.Y <= menuPos.Y + menuSize.Y
                
                local clickedOnButton = mouseLocation.X >= buttonPos.X and 
                                      mouseLocation.X <= buttonPos.X + buttonSize.X and
                                      mouseLocation.Y >= buttonPos.Y and 
                                      mouseLocation.Y <= buttonPos.Y + buttonSize.Y
                
                if not clickedOnMenu and not clickedOnButton then
                    closeActiveKeybindMenu()
                end
            end
        end
    end))
    
    -- Rest of the keybind functionality remains the same...
    local kbListName = dspName
    if not (typeof(kb.Value) == "EnumItem" and kb.Value == Enum.KeyCode.Unknown) then
        kb.ListItem = Library:AddKeybindToList(kbListName, typeof(kb.Value) == "string" and kb.Value or kb.Value.Name)
    end
    
    AddConnection(LibUserInputService.InputBegan:Connect(function(inp, proc)
        if proc and not kb.Binding then return end
        
        if kb.Binding then
            closeActiveKeybindMenu()
            local newKey = nil
            if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                newKey = "MB1"
            elseif inp.UserInputType == Enum.UserInputType.MouseButton2 then
                newKey = "MB2"
            elseif inp.UserInputType == Enum.UserInputType.MouseButton3 then
                newKey = "MB3"
            elseif inp.KeyCode ~= Enum.KeyCode.Unknown then
                newKey = inp.KeyCode
            end
            
            if newKey then
                kb.Value = newKey
                kb.ButtonControl.Text = getKeybindButtonText()
                kb.ButtonControl.BackgroundColor3 = Library.Theme.ElementAlt
                kb.ButtonControl.TextColor3 = Library.Theme.Text
                kb.Binding = false
                
                if kb.Flag then
                    Library.Flags[kb.Flag] = kb.Value
                end
                
                if kb.ListItem then
                    kb.ListItem:Remove()
                    kb.ListItem = nil
                end
                
                if not (typeof(kb.Value) == "EnumItem" and kb.Value == Enum.KeyCode.Unknown) then
                    kb.ListItem = Library:AddKeybindToList(kbListName, typeof(kb.Value) == "string" and kb.Value or kb.Value.Name)
                    updateKeyListVisualState()
                end
            end
        else
            local iM = false
            if typeof(kb.Value) == "EnumItem" and inp.KeyCode == kb.Value then
                iM = true
            elseif type(kb.Value) == "string" then
                if kb.Value == "MB1" and inp.UserInputType == Enum.UserInputType.MouseButton1 then
                    iM = true
                elseif kb.Value == "MB2" and inp.UserInputType == Enum.UserInputType.MouseButton2 then
                    iM = true
                elseif kb.Value == "MB3" and inp.UserInputType == Enum.UserInputType.MouseButton3 then
                    iM = true
                end
            end
            
            if iM and not (typeof(kb.Value) == "EnumItem" and kb.Value == Enum.KeyCode.Unknown) then
                if kb.Mode == "Hold" then
                    if not kb.Active then
                        kb.Active = true
                        kb.Callback(true)
                        updateKeyListVisualState()
                    end
                elseif kb.Mode == "Toggle" then
                    kb.Active = not kb.Active
                    kb.Callback(kb.Active)
                    updateKeyListVisualState()
                end
            end
        end
    end))
    
    AddConnection(LibUserInputService.InputEnded:Connect(function(inp, proc)
        if kb.Mode == "Hold" and kb.Active then
            local iM = false
            if typeof(kb.Value) == "EnumItem" and inp.KeyCode == kb.Value then
                iM = true
            elseif type(kb.Value) == "string" then
                if kb.Value == "MB1" and inp.UserInputType == Enum.UserInputType.MouseButton1 then
                    iM = true
                elseif kb.Value == "MB2" and inp.UserInputType == Enum.UserInputType.MouseButton2 then
                    iM = true
                elseif kb.Value == "MB3" and inp.UserInputType == Enum.UserInputType.MouseButton3 then
                    iM = true
                end
            end
            
            if iM then
                kb.Active = false
                kb.Callback(false)
                updateKeyListVisualState()
            end
        end
    end))
    
    if kb.Flag then
        Library.Options[kb.Flag] = kb
        local sK = Library.Flags[kb.Flag]
        local sM = Library.Flags[kb.Flag .. "_mode"]
        if sK then kb.Value = sK end
        if sM then kb.Mode = sM end
        kb.ButtonControl.Text = getKeybindButtonText()
        
        if kb.ListItem then
            kb.ListItem:Remove()
            kb.ListItem = nil
        end
        
        if not (typeof(kb.Value) == "EnumItem" and kb.Value == Enum.KeyCode.Unknown) then
            kb.ListItem = Library:AddKeybindToList(kbListName, typeof(kb.Value) == "string" and kb.Value or kb.Value.Name)
        end
        
        if kb.Mode == "Always" then
            if not kb.Active then
                kb.Active = true
                kb.Callback(true)
            end
        end
        updateKeyListVisualState()
    end
    
    return kb
end
            function section:ColorPicker(config)
                -- Ensure config is a table to prevent indexing nil
                config = config or {} -- <<< ADD THIS LINE

                local defaultEffect = {IsRainbow = false, IsPulsing = false, EffectSpeed = 5}
                local cpE = {
                    Name = config.Name or "Color",
                    Value = config.Default or Color3.fromRGB(255, 255, 255),
                    Transparency = config.DefaultAlpha or 0, -- For standalone, 0 means opaque
                    Callback = config.Callback or function()                        end,
                    Flag = config.Flag,
                    PickerFrame = nil,
                    DisplayButton = nil,
                    EffectData = table_clone(config.DefaultEffectData or defaultEffect),
                    Risky = config.risky or false,
                    TooltipEnabled = config.tooltip or false, -- Now safe due to the check above
                    TooltipText = config.tooltiptext or ""   -- Now safe
                }
                -- Initialize HSV and ManualHSV from Value and Alpha (Transparency)
                local h, s, v = cpE.Value:ToHSV()
                cpE.Hue, cpE.Sat, cpE.Val = h, s, v
                cpE.Alpha = 1 - cpE.Transparency -- Convert transparency to alpha (0-1)
                
                cpE.ManualHue, cpE.ManualSat, cpE.ManualVal, cpE.ManualAlpha = cpE.Hue, cpE.Sat, cpE.Val, cpE.Alpha
                cpE.OriginalColor = cpE.Value
                cpE.OriginalAlpha = cpE.Alpha 
                cpE.OriginalEffectData = table_clone(cpE.EffectData)

                local hldr =
                    Create(
                    "Frame",
                    {
                        Size = UDim2.new(1, 0, 0, ConfigurableSettings.ColorPickerElementHeight),
                        BackgroundTransparency = 1,
                        Parent = cntr
                    }
                )
                -- Check for TooltipEnabled *after* it's been defaulted in cpE
                if cpE.TooltipEnabled and cpE.TooltipText ~= "" then
                    AddConnection(
                        hldr.MouseEnter:Connect(
                            function()
                                Library:ShowTooltip(cpE.TooltipText, hldr)
                            end
                        )
                    )
                    AddConnection(
                        hldr.MouseLeave:Connect(
                            function()
                                Library:HideTooltip()                            
                            end
                        )
                    )
                end

                local dspN = cpE.Name
                if cpE.Risky then
                    dspN = dspN .. " ⚠️"
                end
                local lbl =
                    Create(
                    "TextLabel",
                    {
                        Size = UDim2.new(1, -70, 1, 0),
                        Position = UDim2.new(0, 0, 0, 0),
                        BackgroundTransparency = 1,
                        Text = dspN,
                        TextColor3 = cpE.Risky and (Library.Theme.TextRisky or ConfigurableSettings.RiskyColor) or
                            Library.Theme.Text,
                        TextSize = ConfigurableSettings.DefaultFontSize,
                        Font = Enum.Font.Gotham,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = hldr
                    }
                )
                if not cpE.Risky then
                    table.insert(window.ElementsToTheme, {lbl, "TextColor3", "Text"})
                end

                cpE.DisplayButton =
                    Create(
                    "TextButton",
                    {
                        Size = UDim2.new(0, 60, 1, 0),
                        Position = UDim2.new(1, -60, 0, 0),
                        BackgroundColor3 = cpE.Value,
                        Text = "",
                        Parent = hldr
                    }
                )
                Create("UICorner", {Parent = cpE.DisplayButton, CornerRadius = ConfigurableSettings.SmallCornerRadius})
                local dS =
                    Create(
                    "UIStroke",
                    {Color = Library.Theme.Border, Thickness = 1, Transparency = 0.5, Parent = cpE.DisplayButton}
                )
                table.insert(window.ElementsToTheme, {dS, "Color", "Border"})
                local dAO =
                    Create(
                    "Frame",
                    {
                        Name = "AlphaOverlay",
                        Size = UDim2.fromScale(1, 1),
                        BackgroundColor3 = Color3.new(0, 0, 0),
                        BackgroundTransparency = cpE.Transparency, -- Use the element's transparency
                        Parent = cpE.DisplayButton,
                        ZIndex = cpE.DisplayButton.ZIndex + 1
                    }
                )
                Create("UICorner", {Parent = dAO, CornerRadius = ConfigurableSettings.SmallCornerRadius})

                function cpE:UpdateVisuals(color, alpha, effectData, isPreview) -- For standalone ColorPicker
                    local h,s,v = color:ToHSV()
                    if not isPreview then 
                        self.Value = color 
                        self.Alpha = alpha 
                        self.Transparency = 1 - alpha 
                        self.EffectData = table_clone(effectData or self.EffectData)
                        self.ManualHue, self.ManualSat, self.ManualVal, self.ManualAlpha = h,s,v,alpha
                        local existingIndex = nil
                        for i,entry in ipairs(Library.ActiveEffectElements) do if entry.element == self then existingIndex = i; break end end
                        if self.EffectData.IsRainbow or self.EffectData.IsPulsing then
                            local entryData = {element = self, effectData = self.EffectData}
                            if existingIndex then Library.ActiveEffectElements[existingIndex] = entryData
                            else table.insert(Library.ActiveEffectElements, entryData) end
                            if not Library.GlobalEffectConnection or not Library.GlobalEffectConnection.Connected then
                                Library.GlobalEffectConnection = LibRunService.RenderStepped:Connect(function() Library:UpdateGlobalEffects() end)
                            end
                        elseif existingIndex then
                            table.remove(Library.ActiveEffectElements, existingIndex)
                        end
                        if self.Flag then
                             Library.Flags[self.Flag] = {R=self.Value.R,G=self.Value.G,B=self.Value.B,A=self.Alpha,EffectData=table_clone(self.EffectData)}
                        end
                        self.Callback(self.Value, self.Alpha, self.EffectData) 
                    else 
                         if not (effectData and (effectData.IsRainbow or effectData.IsPulsing)) then
                            self.Hue,self.Sat,self.Val = h,s,v
                        end
                        self.Alpha = alpha 
                    end
                    
                    self.DisplayButton.BackgroundColor3 = color
                    if dAO and dAO.Parent then dAO.BackgroundTransparency = 1 - alpha end -- update based on passed alpha
                end

                cpE.DisplayButton.MouseButton1Click:Connect(function()
                    if Library.ActiveColorPicker and Library.ActiveColorPickerCpElement and Library.ActiveColorPickerCpElement ~= cpE then
                        local oldActivePicker = Library.ActiveColorPicker
                        if oldActivePicker and oldActivePicker.Parent then
                            oldActivePicker:Destroy()
                        end
                        Library:_DestroyModalOverlay()
                        Library.ActiveColorPicker = nil
                        Library.ActiveColorPickerCpElement = nil
                    end
                
                    if cpE.PickerFrame and cpE.PickerFrame.Parent then 
                        cpE.PickerFrame:Destroy()
                        Library:_DestroyModalOverlay()
                        cpE.PickerFrame = nil
                        Library.ActiveColorPicker = nil
                        Library.ActiveColorPickerCpElement = nil
                        return
                    end
                    
                    cpE.OriginalColor, cpE.OriginalAlpha, cpE.OriginalEffectData = cpE.Value, cpE.Alpha, table_clone(cpE.EffectData)
                    cpE.PickerHue, cpE.PickerSat, cpE.PickerVal, cpE.PickerAlpha = cpE.ManualHue, cpE.ManualSat, cpE.ManualVal, cpE.ManualAlpha
                    Library:_CreateNewColorPickerUI(cpE, window.Frame, false) 
                end)

                if cpE.Flag then
                    Library.Options[cpE.Flag] = cpE
                    local iFV = Library.Flags[cpE.Flag]
                    if type(iFV) == "table" and iFV.R ~= nil then
                        local loadedColor = Color3.new(iFV.R, iFV.G, iFV.B)
                        local loadedAlpha = iFV.A or 1 -- Use loaded alpha if present
                        local loadedEffectData = table_clone(iFV.EffectData or defaultEffect)
                        cpE:UpdateVisuals(loadedColor, loadedAlpha, loadedEffectData, false)
                    else 
                        cpE:UpdateVisuals(cpE.Value, cpE.Alpha, table_clone(cpE.EffectData), false) 
                    end
                else 
                    cpE:UpdateVisuals(cpE.Value, cpE.Alpha, table_clone(cpE.EffectData), false) 
                end
                return cpE
            end

            table.insert(tab.Sections, section)
            return section
        end
        table.insert(window.Tabs, tab)
        if #window.Tabs == 1 then
            task.wait()
            tab:Select()
        end
        return tab
    end
    table.insert(self.Windows, window)
    return window
end

function Library:CreateConfigSection(tab)
    local cS = tab:Section("Configuration")
    cS:Textbox(
        {Name = "Config Name", Default = "MyConfig", Flag = "config_name_box", Placeholder = "Enter config name..."}
    )
    cS:Button(
        {Name = "Save Config", Callback = function()
                local cN = (Library.Options["config_name_box"] and Library.Options["config_name_box"].InputControl.Text)
                if not cN or cN == "" then
                    cN = "default"
                end
                Library:SaveConfig(cN)
            end}
    )
    local mS = tab:Section("Manage Configurations")
    local cLF =
        Create(
        "ScrollingFrame",
        {
            Name = "ConfigListScroll",
            Size = UDim2.new(1, 0, 0, 120),
            BackgroundColor3 = Library.Theme.Element,
            BorderSizePixel = 0,
            Parent = mS.Frame:FindFirstChild("Container"),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 5,
            ScrollingDirection = Enum.ScrollingDirection.Y
        }
    )
    Create("UICorner", {Parent = cLF, CornerRadius = ConfigurableSettings.SmallCornerRadius})
    Create("UIStroke", {Parent = cLF, Color = Library.Theme.Border, Thickness = 1, Transparency = 0.7})
    local currentWindow = Library.Windows[#Library.Windows]
    if currentWindow then
        table.insert(currentWindow.ElementsToTheme, {cLF, "BackgroundColor3", "Element"})
        table.insert(currentWindow.ElementsToTheme, {cLF, "ScrollBarImageColor3", "Accent"})
    end
    Create("UIListLayout", {Parent = cLF, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 2)})
    Library.ManageConfigsSection = mS
    Library.ManageConfigsSection.ConfigListFrame = cLF
    mS:Button(
        {Name = "Refresh Config List", Callback = function()
                Library:PopulateConfigList(cLF)
            end}
    )
    Library:PopulateConfigList(cLF)
    return cS, mS
end
function Library:PopulateConfigList(lF)
    if not lF then
        warn("ohbeecity PopulateConfigList: listFrame nil")
        return
    end
    local nCL = lF:FindFirstChild("NoConfigsLabel")
    for _, ch in ipairs(lF:GetChildren()) do
        if ch:IsA("Frame") and ch.Name ~= "NoConfigsLabel" and ch.Name ~= "UIListLayout" then
            ch:Destroy()
        end
    end
    local cF = false
    if not nCL then
        nCL =
            Create(
            "TextLabel",
            {
                Name = "NoConfigsLabel",
                Size = UDim2.new(1, 0, 0, 20),
                Text = "No configs found.",
                TextColor3 = self.Theme.TextDark,
                BackgroundTransparency = 1,
                Parent = lF,
                Font = Enum.Font.Gotham,
                TextSize = ConfigurableSettings.SmallFontSize,
                Visible = false
            }
        )
    end
    nCL.Visible = true
    if not (self.FileSystem.Enabled and self.FileSystem.ListFiles) then
        nCL.Text = "File system N/A"
        return
    end
    local s, fls = pcall(self.FileSystem.ListFiles, self.FileSystem.DefaultConfigPath)
    if not s or not fls then
        nCL.Text = "Could not list"
        warn("ohbeecity: Error list files:", fls)
        return
    end
    for _, fP in ipairs(fls) do
        local fN = string.match(fP, "([^/\\]+)%.json$")
        if fN then
            cF = true
            nCL.Visible = false
            local iF =
                Create(
                "Frame",
                {
                    Size = UDim2.new(1, 0, 0, ConfigurableSettings.ElementHeight + 5),
                    BackgroundTransparency = 1,
                    Parent = lF
                }
            )
            Create(
                "TextLabel",
                {
                    Size = UDim2.new(0.55, -5, 1, 0),
                    BackgroundTransparency = 1,
                    Text = fN,
                    TextColor3 = self.Theme.Text,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = iF,
                    Font = Enum.Font.Gotham,
                    TextSize = ConfigurableSettings.DefaultFontSize
                }
            )
            local ldB =
                Create(
                "TextButton",
                {
                    Size = UDim2.new(0.2, -5, 1, 0),
                    Position = UDim2.new(0.55, 0, 0, 0),
                    BackgroundColor3 = self.Theme.ElementAlt,
                    Text = "Load",
                    TextColor3 = self.Theme.Text,
                    TextSize = ConfigurableSettings.SmallFontSize,
                    Font = Enum.Font.Gotham,
                    Parent = iF
                }
            )
            Create("UICorner", {Parent = ldB, CornerRadius = ConfigurableSettings.SmallCornerRadius})
            ldB.MouseEnter:Connect(
                function()
                    LibTweenService:Create(ldB, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.Accent}):Play()
                end
            )
            ldB.MouseLeave:Connect(
                function()
                    LibTweenService:Create(ldB, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.ElementAlt}):Play(

                    )
                end
            )
            local delB =
                Create(
                "TextButton",
                {
                    Size = UDim2.new(0.25, -5, 1, 0),
                    Position = UDim2.new(0.75, 5, 0, 0),
                    BackgroundColor3 = self.Theme.ElementAlt,
                    Text = "Delete",
                    TextColor3 = self.Theme.Text,
                    TextSize = ConfigurableSettings.SmallFontSize,
                    Font = Enum.Font.Gotham,
                    Parent = iF
                }
            )
            Create("UICorner", {Parent = delB, CornerRadius = ConfigurableSettings.SmallCornerRadius})
            delB.MouseEnter:Connect(
                function()
                    LibTweenService:Create(delB, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.Accent}):Play()
                end
            )
            delB.MouseLeave:Connect(
                function()
                    LibTweenService:Create(delB, TweenInfo.new(0.1), {BackgroundColor3 = Library.Theme.ElementAlt}):Play(

                    )
                end
            )
            ldB.MouseButton1Click:Connect(
                function()
                    self:LoadConfig(fN)
                end
            )
            delB.MouseButton1Click:Connect(
                function()
                    if self.FileSystem.Enabled and self.FileSystem.DeleteFile then
                        local dS, dE =
                            pcall(self.FileSystem.DeleteFile, self.FileSystem.DefaultConfigPath .. fN .. ".json")
                        if dS then
                            self:PopulateConfigList(lF)
                        else
                            warn("ohbeecity: Error deleting:", dE)
                        end
                    end
                end
            )
        end
    end
    if not cF then
        nCL.Text = "No configs found."
        nCL.Visible = true
    else
        nCL.Visible = false
    end
end
function Library:ApplyThemeColors()
    local th = self.Theme
    for _, win in ipairs(self.Windows) do
        for _, dat in ipairs(win.ElementsToTheme) do
            local el, pr, tk, sts = dat[1], dat[2], dat[3], dat[4]
            if el and el.Parent then
                local cVA = th[tk]
                if sts then
                    if (el:IsA("TextButton") or el:IsA("ImageButton")) then
                        if win.ActiveTab and el == win.ActiveTab.Button and sts.active then
                            cVA = th[sts.active] or sts.active
                        elseif el.Text == "..." and sts.binding then
                            cVA = th[sts.binding] or sts.binding
                        end
                    elseif el:IsA("Frame") and el.Name == "Box" then
                        local tO = nil
                        if el.Parent and el.Parent.Parent and Library.Options then
                            for fK, op in pairs(Library.Options) do
                                if op.CheckboxFrame == el then
                                    tO = op
                                    break
                                end
                            end
                        end
                        if tO and tO.Enabled then
                            cVA = th.Accent
                        else
                            cVA = th.ElementAlt
                        end
                    end
                end
                if cVA and el[pr] ~= cVA then
                    el[pr] = cVA
                end
            end
        end
        if win.Content and win.Content:IsA("ScrollingFrame") then
            win.Content.ScrollBarImageColor3 = th.Accent
        end
        if win.ActiveTab and win.ActiveTab.Button then
            win.ActiveTab.Button.BackgroundColor3 = th.Accent
            win.ActiveTab.Button.TextColor3 = th.TextOnAccent
        end
    end
    if self.Watermark then
        self.Watermark.BackgroundColor3 = th.BackgroundAlt
        self.Watermark:FindFirstChild("UIStroke").Color = th.Border
        self.Watermark:FindFirstChild("WatermarkText").TextColor3 = th.Text
    end
    if self.KeyListFrame then
        self.KeyListFrame.BackgroundColor3 = th.BackgroundAlt
        self.KeyListFrame:FindFirstChild("MainStroke").Color = th.Border
        local tB = self.KeyListFrame:FindFirstChild("TitleBar")
        if tB then
            tB.BackgroundColor3 = th.Element
            tB:FindFirstChild("TitleText").TextColor3 = th.Accent
        end
        local kLC = self.KeyListFrame:FindFirstChild("Content")
        if kLC then
            kLC.BackgroundColor3 = th.BackgroundAlt
        end
        if self.KeyListItemsContainer then
            self.KeyListItemsContainer.ScrollBarImageColor3 = th.Accent
        end
        for _, itemE in pairs(self.KeybindListItems) do
            if itemE.Frame and itemE.Frame.Parent then
                local kbO = nil
                if itemE.Frame.Name:match("KeybindListItem_") then
                    local clnN = itemE.Frame.Name:gsub("KeybindListItem_", "")
                    for flg, opt in pairs(Library.Options) do
                        if opt.Flag and string.gsub(opt.Name, " ⚠️", "") == clnN then
                            kbO = opt
                            break
                        end
                        if not opt.Flag and opt.Name == clnN then
                            kbO = opt
                            break
                        end
                    end
                end
                itemE:SetVisualState(kbO and kbO.Active or false)
            end
        end
    end
    for _, dd in ipairs(self.AllDropdowns) do
        if dd and dd.OptionButtons and dd.Holder and dd.Holder.Parent then
            local cV = dd.Flag and Library.Flags[dd.Flag] or dd.Value
            for _, oB in ipairs(dd.OptionButtons) do
                if oB and oB.Parent then
                    local oN = oB.Text
                    local iS = false
                    if dd.Multi then
                        if type(cV) == "table" then
                            for _, sN in ipairs(cV) do
                                if sN == oN then
                                    iS = true
                                    break
                                end
                            end
                        elseif type(dd.Value) == "table" then
                            for vl, sel in pairs(dd.Value) do
                                if sel and vl == oN then
                                    iS = true
                                    break
                                end
                            end
                        end
                    else
                        iS = (cV == oN)
                    end
                    oB.BackgroundColor3 = iS and th.Accent or th.Element
                    oB.TextColor3 = iS and th.TextOnAccent or th.Text
                end
            end
        end
    end
    if Library.ActiveColorPicker and Library.ActiveColorPicker.Parent then
        Library:_UpdateActiveColorPickerTheme()
    end
    if self.TooltipFrame and self.TooltipFrame.Parent then
        self.TooltipFrame.BackgroundColor3 = th.BackgroundAlt
        local strk = self.TooltipFrame:FindFirstChild("TooltipStroke")
        if strk then
            strk.Color = th.Border
        end
        if self.TooltipTextLabel then
            self.TooltipTextLabel.TextColor3 = th.Text
        end
    end
    for _, win in ipairs(self.Windows) do
        for _, tab in ipairs(win.Tabs) do
            for _, sec in ipairs(tab.Sections) do
                if sec.Frame and sec.Frame:FindFirstChild("Container") then
                    for _, elH in ipairs(sec.Frame.Container:GetChildren()) do
                        local riskL = elH:FindFirstChildOfClass("TextLabel")
                        if riskL and string.find(riskL.Text, " ⚠️$") then
                            riskL.TextColor3 = th.TextRisky or ConfigurableSettings.RiskyColor
                        end
                    end
                end
            end
        end
    end
end
local function serVal(v)
    if typeof(v) == "Color3" then
        return {_type = "Color3", R = v.R, G = v.G, B = v.B}
    elseif typeof(v) == "EnumItem" and v.EnumType == Enum.KeyCode then
        return {_type = "KeyCode", Name = v.Name}
    elseif typeof(v) == "string" and (string.sub(v, 1, 2) == "MB" and tonumber(string.sub(v, 3))) then
        return {_type = "MouseBinding", Name = v}
    elseif typeof(v) == "table" then
        if v.R ~= nil and v.G ~= nil and v.B ~= nil and v.A ~= nil and v.EffectData ~= nil then
            return {_type = "RGBAEffect", R = v.R, G = v.G, B = v.B, A = v.A, EffectData = v.EffectData}
        elseif v.enabled ~= nil and v.color ~= nil and v.EffectData ~= nil then
            return {
                _type = "ToggleColorEffect",
                enabled = v.enabled,
                color = serVal(v.color),
                EffectData = v.EffectData
            }
        elseif v.R ~= nil and v.G ~= nil and v.B ~= nil and v.A ~= nil then
            return {_type = "RGBA", R = v.R, G = v.G, B = v.B, A = v.A}
        else
            local nT = {}
            for i, val in ipairs(v) do
                nT[i] = serVal(val)
            end
            for k, val in pairs(v) do
                if not nT[k] and not tonumber(k) then
                    nT[k] = serVal(val)
                end
            end
            return nT
        end
    end
    return v
end
local function desVal(sV)
    if type(sV) == "table" and sV._type then
        if sV._type == "Color3" then
            return Color3.new(sV.R, sV.G, sV.B)
        elseif sV._type == "KeyCode" and Enum.KeyCode[sV.Name] then
            return Enum.KeyCode[sV.Name]
        elseif sV._type == "MouseBinding" then
            return sV.Name
        elseif sV._type == "RGBAEffect" then
            return {R = sV.R, G = sV.G, B = sV.B, A = sV.A, EffectData = sV.EffectData}
        elseif sV._type == "ToggleColorEffect" then
            return {enabled = sV.enabled, color = desVal(sV.color), EffectData = sV.EffectData}
        elseif sV._type == "RGBA" then
            return {R = sV.R, G = sV.G, B = sV.B, A = sV.A}
        end
    elseif type(sV) == "table" and not sV._type then
        local nT = {}
        for i, v in ipairs(sV) do
            nT[i] = desVal(v)
        end
        for k, v in pairs(sV) do
            if not nT[k] and not tonumber(k) then
                nT[k] = desVal(v)
            end
        end
        return nT
    end
    return sV
end
function Library:SaveConfig(fN)
    local cD = {}
    if Library.Options["config_name_box"] and Library.Options["config_name_box"].InputControl then
        Library.Flags["config_name_box"] = Library.Options["config_name_box"].InputControl.Text
    end
    for f, v in pairs(self.Flags) do
        cD[f] = serVal(v)
    end
    local s, jD = pcall(LibHttpService.JSONEncode, LibHttpService, cD)
    if not s then
        warn("ohbeecity Save Err(JSONEnc):", jD)
        return
    end
    if self.FileSystem.Enabled and self.FileSystem.WriteFile then
        local p = self.FileSystem.DefaultConfigPath
        if self.FileSystem.MakeFolder and not self.FileSystem.IsFolder(p) then
            self.FileSystem.MakeFolder(p)
        end
        local sW, e = pcall(self.FileSystem.WriteFile, p .. fN .. ".json", jD)
        if sW then
            if self.ManageConfigsSection and self.ManageConfigsSection.ConfigListFrame then
                self:PopulateConfigList(self.ManageConfigsSection.ConfigListFrame)
            end
            print("ohbeecity: Config '" .. fN .. "' saved.")
        else
            warn("ohbeecity Save Err(WriteFile):", e)
        end
    else
        print("ohbeecity Data for '" .. fN .. "'(FS Off):\n" .. jD)
    end
end
function Library:LoadConfig(fN)
    local jD
    if self.FileSystem.Enabled and self.FileSystem.ReadFile then
        local p = self.FileSystem.DefaultConfigPath .. fN .. ".json"
        if not self.FileSystem.IsFile(p) then
            warn("ohbeecity: File not found: " .. p)
            return
        end
        local sR, c = pcall(self.FileSystem.ReadFile, p)
        if sR then
            jD = c
        else
            warn("ohbeecity Load Err(ReadFile):", c)
            return
        end
    else
        warn("ohbeecity: FS off for load.")
        return
    end
    local s, cD = pcall(LibHttpService.JSONDecode, LibHttpService, jD)
    if not s then
        warn("ohbeecity Load Err(JSONDec):", cD)
        return
    end
    local tNFC, aCFC = nil, nil
    for f, sV in pairs(cD) do
        local v = desVal(sV)
        self.Flags[f] = v
        if f == "ui_theme_dd" then
            tNFC = v
        elseif f == "theme_accent_color" then
            aCFC = v
        end
        if self.Options[f] then
            local opt = self.Options[f]
            if opt.EnableColorPicker then
                if type(v) == "table" and v.enabled ~= nil and v.color then
                    opt:SetEnabled(v.enabled)
                    opt:UpdateColorVisuals(
                        Color3.new(v.color.R, v.color.G, v.color.B),
                        v.color.A or 1,
                        v.EffectData,
                        false
                    )
                end
            elseif opt.UpdateVisuals and type(v) == "table" and v.R ~= nil and v.G ~= nil and v.B ~= nil then
                opt:UpdateVisuals(Color3.new(v.R, v.G, v.B), v.A or 1, v.EffectData, false)
            elseif opt.ButtonControl and opt.Mode then
                opt.Value = v
                local sM = self.Flags[f .. "_mode"]
                if sM then
                    opt.Mode = sM
                end
                local kName = type(opt.Value) == "string" and opt.Value or opt.Value.Name
                opt.ButtonControl.Text = kName .. " [" .. string.sub(opt.Mode, 1, 1) .. "]"
                if opt.ListItem then
                    opt.ListItem:Remove()
                    opt.ListItem = nil
                end
                if not (type(opt.Value) == "EnumItem" and opt.Value == Enum.KeyCode.Unknown) then
                    local dN = opt.Name
                    if opt.Risky then
                        dN = dN .. " ⚠️"
                    end
                    opt.ListItem = self:AddKeybindToList(dN, kName)
                end
                if opt.Mode == "Always" then
                    if not opt.Active then
                        opt.Active = true
                        opt.Callback(true)
                    end
                else
                    if opt.Active then
                        opt.Active = false
                        opt.Callback(false)
                    end
                end
                if opt.ListItem then
                    opt.ListItem:SetVisualState(opt.Active)
                end
            elseif opt.Set then
                opt:Set(v)
            elseif opt.Multi and type(opt.Value) == "table" then
                if type(v) == "table" then
                    for k in pairs(opt.Value) do
                        opt.Value[k] = nil
                    end
                    for _, vN in ipairs(v) do
                        opt.Value[vN] = true
                    end
                    local mB = opt.Holder and opt.Holder:FindFirstChild("DropdownMain")
                    local l = mB and mB:FindFirstChildWhichIsA("TextLabel")
                    if l then
                        local dN = opt.Name
                        if opt.Risky then
                            dN = dN .. " ⚠️"
                        end
                        local sN = {}
                        for o, iS in pairs(opt.Value) do
                            if iS then
                                table.insert(sN, o)
                            end
                        end
                        table.sort(sN)
                        local dS = #sN == 0 and "None" or table.concat(sN, ", ")
                        if #dS > 25 and #sN > 1 then
                            dS = #sN .. " selected"
                        end
                        l.Text = dN .. ": " .. dS
                    end
                    opt.Callback(v)
                end
            elseif opt.InputControl and opt.InputControl:IsA("TextBox") then
                opt.InputControl.Text = tostring(v)
                opt.Value = tostring(v)
            end
        end
    end
    if tNFC and self.Themes[tNFC] then
        self.Theme = table_clone(self.Themes[tNFC])
        self.CurrentThemeName = tNFC
        if self.Options["ui_theme_dd"] then
            self.Options["ui_theme_dd"]:Set(tNFC)
        end
    end
    if aCFC and type(aCFC) == "table" and aCFC.R ~= nil then
        self.Theme.Accent = Color3.new(aCFC.R, aCFC.G, aCFC.B)
        local L = 0.2126 * self.Theme.Accent.R + 0.7152 * self.Theme.Accent.G + 0.0722 * self.Theme.Accent.B
        self.Theme.TextOnAccent = L > 0.5 and Color3.fromRGB(0, 0, 0) or Color3.fromRGB(255, 255, 255)
        if self.Options["theme_accent_color"] then
            self.Options["theme_accent_color"]:UpdateVisuals(self.Theme.Accent, aCFC.A or 1, aCFC.EffectData, false)
        end
    end
    self:ApplyThemeColors()
    print("ohbeecity: Config '" .. fN .. "' loaded.")
end

AddConnection(
    LibUserInputService.InputBegan:Connect(
        function(inp, gp)
            if not gp and inp.KeyCode == Library.ToggleKey then
                UIScreenGui.Enabled = not UIScreenGui.Enabled
            end
        end
    )
)
local themeNames = {}
for tN, _ in pairs(Library.Themes) do
    table.insert(themeNames, tN)
end
table.sort(themeNames)

return Library
